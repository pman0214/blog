<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pLog</title><link>http://pman0214.github.io/blog/</link><description></description><atom:link href="http://pman0214.github.io/blog/feeds/rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 01 Jun 2015 00:00:00 +0900</lastBuildDate><item><title>EFIなマシンにソフトRAID1でDebianをインストール</title><link>http://pman0214.github.io/blog/debian-efi-raid.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;(U)EFIなマシンがよく分かっていない。
が、時代の流れ的に(U)EFIなマシンにLinuxをインストールする必要が出てきた。
この記事では、よく分かっていない(U)EFIなマシンにソフトRAIDを組みながらインストールするという無謀なことをやる。
最近のソフトRAIDはRAID0,1くらいなら十分に実用になると聞いたので、ハードウェアのRAIDコントローラは導入せずにソフトウェアでRAID1を組むことにした。&lt;/p&gt;
&lt;p&gt;ちなみに、この記事はインストール完了後から書いているので、この通りにやって動くかどうかは分からん。
トラブル発生時に自分で何とかできそうな人だけにオススメする。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;ディスクの準備&lt;/h2&gt;
&lt;p&gt;当然ながら同じ容量（同じ型番が良いらしい。理由は知らん）のディスクを2台用意しないことには始まらない。&lt;/p&gt;
&lt;p&gt;今回は以下のように4台のディスクを用意した。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;500GB x 2台: システムのメインとして使用する&lt;/li&gt;
&lt;li&gt;3TB x 2台: ユーザデータ格納用として使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;p&gt;全ディスクをマシンに刺して、ディスクのパーティション設定時以外は普通にインストールすればいい。
各ディスクは同じパーティション構成にしておく。
自分の場合はこんな感じにした。&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="14%" /&gt;
&lt;col width="21%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="24%" /&gt;
&lt;col width="16%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;ディスク&lt;/th&gt;
&lt;th class="head"&gt;パーティション&lt;/th&gt;
&lt;th class="head"&gt;サイズ&lt;/th&gt;
&lt;th class="head"&gt;マウントポイント&lt;/th&gt;
&lt;th class="head"&gt;タイプ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;500GB (1)&lt;/td&gt;
&lt;td&gt;/dev/sda1&lt;/td&gt;
&lt;td&gt;100M&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;EFI system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;/dev/sda2&lt;/td&gt;
&lt;td&gt;200M&lt;/td&gt;
&lt;td&gt;/boot&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;/dev/sda5&lt;/td&gt;
&lt;td&gt;メモリと同じだけ&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;swap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;/dev/sda6&lt;/td&gt;
&lt;td&gt;残り全部&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;500GB (2)&lt;/td&gt;
&lt;td&gt;/dev/sdb1&lt;/td&gt;
&lt;td&gt;100M&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;EFI system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;/dev/sdb2&lt;/td&gt;
&lt;td&gt;200M&lt;/td&gt;
&lt;td&gt;/boot2&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;/dev/sdb5&lt;/td&gt;
&lt;td&gt;メモリと同じだけ&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;swap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;/dev/sdb6&lt;/td&gt;
&lt;td&gt;残り全部&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3TB (1)&lt;/td&gt;
&lt;td&gt;/dev/sdc1&lt;/td&gt;
&lt;td&gt;全部&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3TB (2)&lt;/td&gt;
&lt;td&gt;/dev/sdd1&lt;/td&gt;
&lt;td&gt;全部&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;パーティション設定画面にRAIDを設定する部分があるので、ここでRAIDを設定する。
EFIをRAIDに設定することはできないし、 &lt;code&gt;/boot&lt;/code&gt; に関しては &lt;code&gt;grub-install&lt;/code&gt; のときに悲惨な目に遭うとのことなので、自分で冗長化しておくことにした。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/dev/sda6&lt;/code&gt; と &lt;code&gt;/dev/sdb6&lt;/code&gt; で &lt;code&gt;/dev/md0&lt;/code&gt; を、&lt;code&gt;/dev/sdc1&lt;/code&gt; と &lt;code&gt;/dev/sdd1&lt;/code&gt; で &lt;code&gt;/dev/md1&lt;/code&gt; をRAID1として設定する。&lt;/p&gt;
&lt;p&gt;スワップに関しては、別々のディスクにパーティションを設けていればRAID0とほぼ同じ効果を出すことができるのでRAIDの設定をしなくて良い。&lt;/p&gt;
&lt;p&gt;あとは &lt;code&gt;/dev/md0&lt;/code&gt; を &lt;code&gt;/&lt;/code&gt; に、 &lt;code&gt;/dev/md1&lt;/code&gt; を &lt;code&gt;/home&lt;/code&gt; などにマウントしてインストールを続行すればOK。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;スワップを平等に使う&lt;/h2&gt;
&lt;p&gt;デフォルトの設定ではスワップが平等に使われないかもしれない。
スワップの状態は &lt;code&gt;/proc/swaps&lt;/code&gt; で確認できる。
以下のように優先度（ &lt;code&gt;Priority&lt;/code&gt; ）が同じであれば平等に使われることとなる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% cat /proc/swaps
Filename                                Type            Size    Used    Priority
/dev/sdb5                               partition       &lt;span class="m"&gt;15624188&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;       1
/dev/sda5                               partition       &lt;span class="m"&gt;15624188&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;       1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もしPriorityが異なる場合には、 &lt;code&gt;/etc/fstab&lt;/code&gt; で &lt;code&gt;pri&lt;/code&gt; オプションを使って優先度を指定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx none           swap      sw,pri=1      0   0
UUID=yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy none           swap      sw,pri=1      0   0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bootefi"&gt;
&lt;h2&gt;/bootとEFIシステムパーティションの冗長化&lt;/h2&gt;
&lt;p&gt;まずは &lt;code&gt;/boot&lt;/code&gt; を冗長化する。
冗長化と言っても、壊れたときにデータを復元できるようにバックアップを取っているだけなので、故障時には復旧作業が必要になる。&lt;/p&gt;
&lt;p&gt;冗長化用のパーティションは &lt;code&gt;/boot2&lt;/code&gt; としてマウントしてあるはずなので、ここに丸ごとコピーすればOK。
ただし、 &lt;code&gt;/boot/efi&lt;/code&gt; は別のパーティションなので除外する。
マウントするためにディレクトリは作成しておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo rsync --exclude &lt;span class="s2"&gt;&amp;quot;efi/&amp;quot;&lt;/span&gt; -avrz -e cp /boot/ /boot2/
% sudo mkdir /boot2/efi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;EFIシステムパーティションに関してはgrubをインストールすることで同じ内容のパーティションを作成できるが、念のためまったく同じ状態にしておく。
後でgrubを使って上書きするので、この作業は必要ないかもしれない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sda1 &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sdb1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このままではUUIDまで同じになってしまうので、UUIDを書き換える。
EFIシステムパーティションはvfatでフォーマットされているのだが、vfatのUUIDを書き換える方法が分からんのでddで無理矢理書き換える。&lt;/p&gt;
&lt;p&gt;バイナリエディタが必要になるのでbviを導入する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install bvi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パーティションの先頭部分を書き出して、UUIDを変更してから書き戻す。
0x43から4 byteがUUID。リトルエンディアン。
他のディスクとUUIDが異なればいいので、普通は1 byte書き換えれば十分。
各パーティションのUUIDは &lt;code&gt;ls -l /dev/disk/by-uuid&lt;/code&gt; で確認できるので、これを見ると参考になるかも。
ただし &lt;code&gt;dd&lt;/code&gt; コマンド使用後は &lt;code&gt;/dev/sda1&lt;/code&gt; と &lt;code&gt;/dev/sdb1&lt;/code&gt; のUUIDが同じものになっていまっているため、この部分だけはうまく表示できない場合がある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sdb1 &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/blk &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
% sudo bvi /tmp/blk
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これをディスクに書き戻す。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/blk &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sdb1 &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;/etc/fstab&lt;/code&gt; も変更しておく。
&lt;code&gt;/dev/sdb1&lt;/code&gt; はマウントされてないと思われるので、 &lt;code&gt;dev/sda1&lt;/code&gt; の行をコピーしてUUIDとマウント先を書き換えればOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;UUID=xxxx-xxxx  /boot2/efi       vfat    umask=0077      0       1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;UUIDを書き換えたので、念のため再起動しておく。
&lt;code&gt;/etc/fstab&lt;/code&gt; を書き換えたので &lt;code&gt;/boot2/efi&lt;/code&gt; がマウントされるはず。&lt;/p&gt;
&lt;p&gt;あとはrootになって以下のような感じでgrubをインストールすればOK。
&lt;code&gt;efivars&lt;/code&gt; モジュールがロードされていればEFIブートマネージャ（？）にも登録される。
すなわち、BIOSでブート順を指定するところに現れるようになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo grub-install --target&lt;span class="o"&gt;=&lt;/span&gt;x86_64-efi --efi-directory&lt;span class="o"&gt;=&lt;/span&gt;/boot2/efi --bootloader-id&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;debian (sub)&amp;quot;&lt;/span&gt; --recheck
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;EFIブートマネージャへの登録状況は、オプションなしで &lt;code&gt;efibootmgr&lt;/code&gt; を実行すれば確認できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo efibootmgr
BootCurrent: 0000
Timeout: &lt;span class="m"&gt;1&lt;/span&gt; seconds
BootOrder: 0001,0000,0003,0006,000B
Boot0000* debian
Boot0001* debian &lt;span class="o"&gt;(&lt;/span&gt;sub&lt;span class="o"&gt;)&lt;/span&gt;
Boot0003* UEFI: Built-in EFI Shell
Boot0006* CD/DVD Drive
Boot000B* Hard Drive
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;efivars&lt;/code&gt; モジュールがロードされていなければ、以下のようにしてEFIブートマネージャに登録する。
オプション類はmanを参照のこと。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo efibootmgr -c -g -d /dev/sdb -p &lt;span class="m"&gt;1&lt;/span&gt; -L &lt;span class="s2"&gt;&amp;quot;debian (sub)&amp;quot;&lt;/span&gt; -l &lt;span class="s1"&gt;&amp;#39;\EFI\debian\grubx64.efi&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Mon, 01 Jun 2015 00:00:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-06-01:blog/debian-efi-raid.html</guid><category>debian</category><category>linux</category><category>efi</category><category>raid</category></item><item><title>RedmineをGitHubと連携させる</title><link>http://pman0214.github.io/blog/redmine-github.html</link><description>&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href="/blog/redmine-install.html"&gt;先日インストールしたRedmine&lt;/a&gt;だが、gitレポジトリの登録はできるものの、その機能は十分とは言えない状況だ。&lt;/p&gt;
&lt;p&gt;svnレポジトリの場合はユーザ名・パスワードを使って自動的にcheckoutできるようなのだが、gitレポジトリではそれができないようだ。
具体的には、gitの場合にはシステム上、すなわちサーバ上に存在するレポジトリのみを登録できるようになっている。いまだ開発途上ということだろう。&lt;/p&gt;
&lt;p&gt;このため、GitHubと連携させるためには一手間が必要となる。&lt;/p&gt;
&lt;h2&gt;Redmineへのweb-hookプラグインの導入&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git&lt;/code&gt;が入っていなかったら&lt;code&gt;sudo apt-get install git-core&lt;/code&gt;で導入しておく。&lt;/p&gt;
&lt;p&gt;GitHubからのweb-hookを使うためにはjsonを処理する必要があるため、json用のgemを導入しておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sudo -u redmine&amp;quot;&lt;/span&gt;
% &lt;span class="nb"&gt;cd&lt;/span&gt; /home/redmine/redmine
% sr vi Gemfile.local
gem &lt;span class="s2"&gt;&amp;quot;json&amp;quot;&lt;/span&gt; ← ★追加する
% sr bundle install --without development &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自分の環境では&lt;code&gt;json&lt;/code&gt;が2回以上あると怒られたので、すでにどこかで書いてあったようだ。実害はないのでいいが。&lt;/p&gt;
&lt;p&gt;GitHub hookプラグインを導入する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /home/redmine/redmine/plugins
% sr git clone https://github.com/koppen/redmine_github_hook.git
% &lt;span class="nb"&gt;cd &lt;/span&gt;redmine_github_hook
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle install --without development &lt;span class="nb"&gt;test&lt;/span&gt;
% &lt;span class="nb"&gt;cd&lt;/span&gt; ../..
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle install --without development &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Redmineを再起動する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo /etc/init.d/redmine restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Redmineに管理者アカウントでログインすれば、管理＞プラグインで&lt;code&gt;Redmine Github Hook plugin&lt;/code&gt;が見えるはず。&lt;/p&gt;
&lt;h2&gt;RedmineでのGitHubレポジトリの追加&lt;/h2&gt;
&lt;p&gt;GitHubのレポジトリを直接持ってくることはできないため、サーバ上でcloneしておく必要がある。
ここでは非公開レポジトリを想定してデプロイキーを使ってcloneすることにする。&lt;/p&gt;
&lt;p&gt;まずはssh鍵を作成。nginx+unicornでredmineを起動しているので、redmineを実行しているユーザは&lt;code&gt;redmine&lt;/code&gt;である。
このユーザ用のssh鍵を作成し、デプロイキーとして登録する。
ssh鍵の作成ではパスフレーズを設定してはいけない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /home/redmine
% &lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sudo -u redmine&amp;quot;&lt;/span&gt;
% sr mkdir .ssh
% sr chmod &lt;span class="m"&gt;700&lt;/span&gt; .ssh
% sr ssh-keygen -t ecdsa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;できあがった公開鍵&lt;code&gt;/home/redmine/.ssh/id_ecdsa.pub&lt;/code&gt;をGitHubの当該レポジトリにデプロイキーとして登録する。&lt;/p&gt;
&lt;p&gt;レポジトリ用のディレクトリを作成してcloneしておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sr mkdir repos
% &lt;span class="nb"&gt;cd &lt;/span&gt;repos
% sr git clone --bare git@github.com/xxxxxx/hoge.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Redmineにcloneしたレポジトリを追加する。
パスは&lt;code&gt;/home/redmine/repos/hoge.git&lt;/code&gt;とすれば良い。
この時点でレポジトリが表示できるはず。&lt;/p&gt;
&lt;p&gt;あとはGitHubにweb-hookを登録すればOK。ここから未テスト。
URLは&lt;code&gt;http(s)://debianサーバ/github_hook?project_id=[プロジェクトの識別子]&lt;/code&gt;とする。
当然ながらdebianサーバは外部からアクセスできるように設定しておく。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Thu, 21 May 2015 12:18:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-05-21:blog/redmine-github.html</guid><category>redmine</category><category>github</category></item><item><title>Debian jessieにRedmineをインストールする</title><link>http://pman0214.github.io/blog/redmine-install.html</link><description>&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;debian jessie 8.0&lt;ul&gt;
&lt;li&gt;debianマシンはすでに用意してあるものとする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;redmine 2.6.5&lt;/li&gt;
&lt;li&gt;backlogs 1.0.6&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;h3&gt;redmine本体&lt;/h3&gt;
&lt;p&gt;必要なツール類をインストールする。MySQLを使うことが多いのだが、個人的な好みによりPostgreSQLを使用することにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install postgresql ruby ruby-dev ruby-pg libpq-dev &lt;span class="se"&gt;\&lt;/span&gt;
  make build-essential gcc &lt;span class="se"&gt;\&lt;/span&gt;
  imagemagick libmagickwand-dev git-core subversion
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PostgreSQLに接続してユーザやDBの作成を行う。&lt;code&gt;password&lt;/code&gt;の部分はもちろん変更すべし。パスワードに記号が入っているとredmineで接続できない場合があるので、英数に限定する方がいいかも。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo -u postgres psql
postgres# CREATE ROLE redmine LOGIN ENCRYPTED PASSWORD &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt; NOINHERIT VALID UNTIL &lt;span class="s1"&gt;&amp;#39;infinity&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
postgres# CREATE DATABASE redmine WITH &lt;span class="nv"&gt;ENCODING&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UTF8&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;OWNER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;redmine&lt;span class="p"&gt;;&lt;/span&gt;
postgres# &lt;span class="se"&gt;\q&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Linuxにユーザ&lt;code&gt;redmine&lt;/code&gt;を追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo adduser --disabled-login --gecos &lt;span class="s1"&gt;&amp;#39;Redmine&amp;#39;&lt;/span&gt; redmine
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;パスワードを設定しておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo passwd redmine
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sudoグループにユーザ&lt;code&gt;redmine&lt;/code&gt;を加えておく。Debianでは&lt;code&gt;visudo&lt;/code&gt;でユーザを追加せず、このグループにユーザを追加するだけでsudoできるように設定されている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo vi /etc/group
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;...
sudo:x:27:redmine ← ★redmineを追加する
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://www.redmine.org/"&gt;Redmineの公式web&lt;/a&gt;からソースをゲットする。Backlogsは2.2.4と2.3.2に対応と書かれているが、今回は執筆時点での最新版2.6.5にBacklogsを導入するという暴挙に出る。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo -u redmine&lt;/code&gt;を多用するのでaliasしておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sudo -u redmine&amp;#39;&lt;/span&gt;
% &lt;span class="nb"&gt;cd&lt;/span&gt; /home/redmine
% sr wget http://www.redmine.org/releases/redmine-2.6.5.tar.gz
% sr tar zxvf redmine-2.6.5.tar.gz
% sr ln -s redmine-2.6.5 redmine
% &lt;span class="nb"&gt;cd &lt;/span&gt;redmine
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;database.ymlのテンプレートをコピーし、設定を施す。&lt;/p&gt;
&lt;p&gt;MySQLの設定をコメントアウトしてPostgreSQLの設定を有効化し、設定を変更する。
testもコメントアウトしてしまってOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sr cp config/database.yml.example config/database.yml
% sr vi config/database.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;production&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;adapter&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postgresql&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;database&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;redmine&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;host&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;localhost&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;username&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;redmine ← ★postgresになっているので変更する&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;password&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;← ★パスワードは最初にPostgreSQLに設定したもの。&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;bundlerを導入してbundleする。システムのrubyを使っているのでbundlerはsudoで入れてしまう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo gem install bundler
% sr bundle install --without development &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;つづいてrake。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sr rake generate_secret_token
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production rake db:migrate
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production rake redmine:load_default_data
Select Language: ja ← ★日本語を指定
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;試しにサーバを動かしてみる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sr ruby script/rails server webrick -e production
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この状態で&lt;code&gt;http://debianサーバ:3000/&lt;/code&gt;に接続して、redmineが見られればOK。
Ctrl-Cでサーバを停止できる。&lt;/p&gt;
&lt;h3&gt;ログ消去&lt;/h3&gt;
&lt;p&gt;ログが永遠に作成されたら嫌なので、logrotateを使って自動的に消去する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo vi /etc/logrotate.d/redmine
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;/home/redmine/redmine/log/*.log {
    rotate 3
    size 1M
    compress
    missingok
    notifempty
    copytruncate
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;テストしてみる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo logrotate -dv /etc/logrotate.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;nginx + unicornにする&lt;/h2&gt;
&lt;p&gt;WEBrickを使うのはアレなのでnginxに乗っける。&lt;/p&gt;
&lt;p&gt;まずはunicornをbundleする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sr vi Gemfile.local
gem &lt;span class="s2"&gt;&amp;quot;unicorn&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;unicornの設定ファイルを作成する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sr vi config/unicorn.rb
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;worker_processes&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;working_directory&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/redmine/redmine&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tmp/unicorn.sock&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RAILS_ROOT&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1:8079&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:tcp_nopush&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tmp/unicorn.pid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RAILS_ROOT&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;

&lt;span class="n"&gt;preload_app&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

&lt;span class="n"&gt;stdout_path&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;log/unicorn.stdout.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RAILS_ROOT&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stderr_path&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;log/unicorn.stderr.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RAILS_ROOT&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="no"&gt;GC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:copy_on_write_friendly&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="no"&gt;GC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy_on_write_friendly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

&lt;span class="n"&gt;before_fork&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disconnect!&lt;/span&gt;

  &lt;span class="n"&gt;old_pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pid&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.oldbin&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;old_pid&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;
      &lt;span class="k"&gt;begin&lt;/span&gt;
        &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;worker_processes&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="ss"&gt;:QUIT&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:TTOU&lt;/span&gt;
        &lt;span class="no"&gt;Process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Errno&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ENOENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Errno&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ESRCH&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;after_fork&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;establish_connection&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;initスクリプトを作成する。上の方の設定は自信無い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo vi /etc/init.d/redmine
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c"&gt;### BEGIN INIT INFO&lt;/span&gt;
&lt;span class="c"&gt;# Provides:          redmine&lt;/span&gt;
&lt;span class="c"&gt;# Required-Start:    $local_fs $remote_fs $network $syslog&lt;/span&gt;
&lt;span class="c"&gt;# Required-Stop:     $local_fs $remote_fs $network $syslog&lt;/span&gt;
&lt;span class="c"&gt;# Default-Start:     2 3 4 5&lt;/span&gt;
&lt;span class="c"&gt;# Default-Stop:      0 1 6&lt;/span&gt;
&lt;span class="c"&gt;# Short-Description: redmine unicorn&lt;/span&gt;
&lt;span class="c"&gt;# Description:       redmine unicorn&lt;/span&gt;
&lt;span class="c"&gt;# chkconfig: - 75 25&lt;/span&gt;
&lt;span class="c"&gt;### END INIT INFO&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin

&lt;span class="c"&gt;# move to project root directory&lt;/span&gt;
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;redmine
&lt;span class="nv"&gt;ENVIROMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production
&lt;span class="nv"&gt;APP_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redmine&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;ROOT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/redmine/redmine&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;PID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/tmp/unicorn.pid&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;CONF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/config/unicorn.rb&amp;quot;&lt;/span&gt;

start&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -e &lt;span class="nv"&gt;$PID&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt; already started&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;start &lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$ROOT_DIR&lt;/span&gt;
  sudo -u &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;APP_USER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -H bundle &lt;span class="nb"&gt;exec &lt;/span&gt;unicorn_rails -c &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CONF&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -E &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ENVIROMENT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -D
&lt;span class="o"&gt;}&lt;/span&gt;

stop&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -e &lt;span class="nv"&gt;$PID&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt; not started&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stop &lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;kill&lt;/span&gt; -QUIT &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PID&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
  rm -f &lt;span class="nv"&gt;$PID&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

force_stop&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -e &lt;span class="nv"&gt;$PID&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt; not started&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stop &lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;kill&lt;/span&gt; -TERM &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PID&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
  rm -f &lt;span class="nv"&gt;$PID&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

reload&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -e &lt;span class="nv"&gt;$PID&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt; not started&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    start
    &lt;span class="nb"&gt;exit &lt;/span&gt;0&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;reload &lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;kill&lt;/span&gt; -HUP &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PID&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

restart&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    stop
    start
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; in
  start&lt;span class="o"&gt;)&lt;/span&gt;
    start
    &lt;span class="p"&gt;;;&lt;/span&gt;
  stop&lt;span class="o"&gt;)&lt;/span&gt;
    stop
    &lt;span class="p"&gt;;;&lt;/span&gt;
  force-stop&lt;span class="o"&gt;)&lt;/span&gt;
    force_stop
    &lt;span class="p"&gt;;;&lt;/span&gt;
  reload&lt;span class="o"&gt;)&lt;/span&gt;
    reload
    &lt;span class="p"&gt;;;&lt;/span&gt;
  restart&lt;span class="o"&gt;)&lt;/span&gt;
    restart
    &lt;span class="p"&gt;;;&lt;/span&gt;
  *&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Syntax Error: release [start|stop|force-stop|reload|restart]&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;permissionを設定し、スタートしておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo chmod &lt;span class="m"&gt;755&lt;/span&gt; /etc/init.d/redmine
% sudo /etc/init.d/redmine start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自動起動設定もしておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo update-rc.d redmine defaults
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;nginxをインストールし、redmineサイト用の設定ファイルを追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install nginx
% sudo vi /etc/nginx/sites-available/redmine
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;upstream redmine {
  server 127.0.0.1:8079;
}

server {
  listen 80;
  server_name redmine.hogehoge.com; ← ★ここは自分のものにあわせて変更する
  server_tokens off;
  root /home/redmine/redmine;

  client_max_body_size 20m;

  # individual nginx logs for this gitlab vhost
  access_log  /var/log/nginx/redmine_access.log;
  error_log   /var/log/nginx/redmine_error.log;

  location / {
    try_files $uri $uri/index.html $uri.html @redmine;
  }

  location @redmine {
    proxy_redirect     off;
    proxy_set_header   X-FORWARDED_PROTO $http_x_forwarded_proto;
    proxy_set_header   Host              $http_host;
    proxy_set_header   X-Real-IP         $http_x_forwarded_for;
    proxy_set_header   X-Forwarded-For   $http_x_forwarded_for;
    proxy_pass http://redmine;
    proxy_intercept_errors on;
    error_page 404 /404.html;
    error_page 422 /422.html;
    error_page 500 502 503 504 /500.html;
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;サイトを有効化してnginxを起動する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/nginx/sites-enabled
% sudo ln -s ../sites-available/redmine
% sudo /etc/init.d/nginx restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この状態で&lt;code&gt;http://debianサーバ/&lt;/code&gt;でredmineにアクセスできるはず。&lt;/p&gt;
&lt;h2&gt;Backlogsプラグイン&lt;/h2&gt;
&lt;h3&gt;Redmineの設定&lt;/h3&gt;
&lt;p&gt;Backlogsの導入時にはBacklogs用のトラッカーを設定する必要があるので、Redmineの設定をしておく。&lt;/p&gt;
&lt;p&gt;まずはRedmineにログインする。管理者の初期設定は、ユーザ・パスワードともに&lt;code&gt;admin&lt;/code&gt;となっている。
&lt;strong&gt;「管理＞ユーザー」からユーザ&lt;code&gt;admin&lt;/code&gt;のパスワードを必ず変更する。&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;ロールと権限&lt;/h4&gt;
&lt;p&gt;必要なものを登録しておく。&lt;/p&gt;
&lt;p&gt;複雑にすると使いにくくなるので、個人的には以下の設定で十分だと思う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理者 → 「メンバー」に名前変更&lt;/li&gt;
&lt;li&gt;開発者 → 削除&lt;/li&gt;
&lt;li&gt;報告書 → 削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;トラッカー&lt;/h4&gt;
&lt;p&gt;「管理＞トラッカー」から以下のトラッカーを追加する。最初からあるものは消してしまっても構わない。バグは最初からあるものを使って構わない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;タスク&lt;/li&gt;
&lt;li&gt;ストーリー&lt;/li&gt;
&lt;li&gt;バグ&lt;/li&gt;
&lt;li&gt;課題&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;チケットのステータス&lt;/h4&gt;
&lt;p&gt;「管理＞チケットのステータス」から以下のステータスを作成する。最初からあるものは消す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Todo（デフォルト値）&lt;/li&gt;
&lt;li&gt;Doing&lt;/li&gt;
&lt;li&gt;Done（終了したチケット）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ワークフロー&lt;/h4&gt;
&lt;p&gt;全部のトラッカーに関してステータスを相互に変更できるように設定する。使い方にもよるが、基本的には非メンバや匿名ユーザは変更できないようにしてしまって問題ない。&lt;/p&gt;
&lt;h3&gt;Backlogsの組込み&lt;/h3&gt;
&lt;p&gt;最新版を取得してくる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sudo -u redmine&amp;quot;&lt;/span&gt;
% &lt;span class="nb"&gt;cd&lt;/span&gt; /home/redmine/redmine/plugins
% sr git clone git://github.com/backlogs/redmine_backlogs.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;redmineに導入する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd &lt;/span&gt;redmine_backlogs
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle install --without development &lt;span class="nb"&gt;test&lt;/span&gt;
% &lt;span class="nb"&gt;cd&lt;/span&gt; ../..
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle install --without development &lt;span class="nb"&gt;test&lt;/span&gt;
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake db:migrate
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake tmp:cache:clear
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake tmp:sessions:clear
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake redmine:backlogs:install
Which trackers &lt;span class="k"&gt;do&lt;/span&gt; you want to use &lt;span class="k"&gt;for&lt;/span&gt; your stories?
  1. タスク
  2. ストーリー
  3. バグ
  4. 課題
Separate values with a space &lt;span class="o"&gt;(&lt;/span&gt;e.g. &lt;span class="m"&gt;1&lt;/span&gt; 3&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;2&lt;/span&gt; ← ★先ほど作った「ストーリー」を選択
Which tracker &lt;span class="k"&gt;do&lt;/span&gt; you want to use &lt;span class="k"&gt;for&lt;/span&gt; your tasks?
  1. タスク
  2. バグ
  3. 課題
Choose one from above &lt;span class="o"&gt;(&lt;/span&gt;or choose none to create a new tracker&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt; ← ★先ほど作った「タスク」を選択
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでBacklogsが使えるようになっているはず。&lt;/p&gt;
&lt;p&gt;最終的に「管理＞情報」では以下のように表示された。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;Environment&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Redmine version                2.6.5.stable&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Ruby version                   2.1.5-p273 (2014-11-13) [x86_64-linux-gnu]&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Rails version                  3.2.21&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Environment                    production&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Database adapter               PostgreSQL&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;SCM&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Subversion                     1.8.10&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Git                            2.1.4&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Filesystem&lt;/span&gt;                     
&lt;span class="l-Scalar-Plain"&gt;Redmine plugins&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;redmine_backlogs               v1.0.6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Sat, 16 May 2015 15:00:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-05-16:blog/redmine-install.html</guid><category>redmine</category><category>debian</category><category>backlogs</category></item><item><title>virtualenv環境のpythonをcronで呼ぶ</title><link>http://pman0214.github.io/blog/cron-python-virtualenv.html</link><description>&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;virtualenv環境で開発したPythonスクリプトをcronで呼び出したいとき、ライブラリとかをどうやって指定するのか分からなかったので考えてみた。&lt;/p&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;以下のようなスクリプトを作っておき、これを呼び出せばOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;PROG_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/hoge
&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;$PROG_DIR&lt;/span&gt;/bin/activate

python &lt;span class="nv"&gt;$PROG_DIR&lt;/span&gt;/hoge.pyc
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;解説というほどでもないけど&lt;/h2&gt;
&lt;p&gt;要するに、普段やっている&lt;code&gt;source bin/activate&lt;/code&gt;を呼んでおけばいいという話。&lt;/p&gt;
&lt;p&gt;なので上記のようなスクリプトを書いておけば対応できる。
引数がある場合にはスクリプトに引数を付ければOK。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;crontab -e&lt;/code&gt;で上記スクリプトの呼び出しを追加すれば試合終了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# m h dom mon dow       command
10 4 * * *              /usr/local/bin/hoge
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Wed, 06 May 2015 18:58:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-05-06:blog/cron-python-virtualenv.html</guid><category>python</category><category>cron</category><category>virtualenv</category></item><item><title>EFIブートするUSBメモリでdebianをインストール</title><link>http://pman0214.github.io/blog/debian-install-efi.html</link><description>&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;EFIブートするUSBメモリを作成し、これを使ってdebianをインストールする。&lt;/li&gt;
&lt;li&gt;古いXserveをdebian化しようとした中での例。&lt;ul&gt;
&lt;li&gt;インストールできたものの、うまく起動しない状態で終わってます。多分ドライバ周り・・・。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;grubを導入したUSBメモリを用意してしまえば、カーネルや初期RAMディスク、ISOイメージを書き換えるだけでよくなる。この作業はUSBメモリのファイルを書き換えるだけなので、debian機は不要。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;必要なもの&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2GBくらいのUSBメモリ&lt;ul&gt;
&lt;li&gt;中身は完全に消える。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;母艦となるdebian機&lt;ul&gt;
&lt;li&gt;VMでも構わないが、USBメモリをmountできないとダメ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;h3&gt;grubの準備&lt;/h3&gt;
&lt;p&gt;まずは母艦となるdebianでEFI対応のgrubを用意する。インストールしたいアーキテクチャに合わせたものを用意する。今回はx86の64bit版で。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install grub-efi-x86_64-bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;USBメモリにパーティションを作る。&lt;code&gt;/dev/sdb&lt;/code&gt;の部分はUSBメモリのデバイス名を指定する。分からん場合は&lt;code&gt;sudo dmesg&lt;/code&gt;とかで調べるべし。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo fdisk /dev/sdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;あとはよしなに。FAT32にするのが良い。どんなマシンでもFAT32なら読めるみたいなので（確証なし）。partition IDをbにするとWin95 FAT32になる。&lt;/p&gt;
&lt;p&gt;FAT32でフォーマット。&lt;code&gt;-v&lt;/code&gt;は詳細表示、&lt;code&gt;-c&lt;/code&gt;は不良ブロック精査、&lt;code&gt;-F&lt;/code&gt;は形式。16にすればFAT16になる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mkfs.vfat -v -c -F &lt;span class="m"&gt;32&lt;/span&gt; /dev/sdb1
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Q. mkfs.vfatなんてないんだけど。&lt;/li&gt;
&lt;li&gt;A. dosfstoolsを入れるべし。&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install dosfstools
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;USBメモリをマウントし、EFIのディレクトリを指定してgrubをUSBメモリに書き込む。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mount /dev/sdb1 /mnt
sudo grub-install —target&lt;span class="o"&gt;=&lt;/span&gt;x86_64-efi —efi-directory&lt;span class="o"&gt;=&lt;/span&gt;/mnt —boot-directory&lt;span class="o"&gt;=&lt;/span&gt;/mnt/boot —no-floppy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみに、Macで起動するためにはEFIの下を&lt;code&gt;boot/bootx64.efi&lt;/code&gt;にしないとダメらしい。本当かしらん。まぁ、変更しておくということで。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mv /mnt/efi/boot/grubx64.efi /mnt/efi/boot/bootx64.efi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;grub.cfgを&lt;code&gt;boot/grub&lt;/code&gt;に作成する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mkdir -p /mnt/boot/grub
sudo vi /mnt/boot/grub/grub.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;grub.cfg&lt;/code&gt;はこんな感じ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Load Graphical modules
insmod efi_gop
insmod efi_uga

# Load Font module
insmod font


# Setup GFXTERM along with loading unifont.pf2 font file

if loadfont ${prefix}/fonts/unifont.pf2
then
   insmod gfxterm
   set gfxmode=&amp;quot;auto&amp;quot;
   set gfxpayload=keep
   terminal_output gfxterm

   set color_normal=light-blue/black
   set color_highlight=light-cyan/blue
fi

insmod part_gpt
insmod part_msdos
insmod fat
insmod ext2

# Timeout for menu
set timeout=5

# Set default boot entry as Entry 0
set default=0

menuentry &amp;quot;Debian Install (expert mode)&amp;quot; {
  set root=(hd0,msdos1)
  linux /boot/vmlinuz root=/dev/sda1 ro video=efifb agp=off priority=low ipv6.disable=1
  initrd /boot/initrd.gz
}
menuentry &amp;quot;Debian Install&amp;quot; {
  set root=(hd0,msdos1)
  linux /boot/vmlinuz root=/dev/sda1 ro video=efifb agp=off ipv6.disable=1
  initrd /boot/initrd.gz
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでgrubの準備は完了。&lt;/p&gt;
&lt;h3&gt;debianインストーラの導入&lt;/h3&gt;
&lt;p&gt;自分はいつも&lt;a href="https://www.debian.org/devel/debian-installer/"&gt;debian開発者ページ（？）&lt;/a&gt;からインストーラを取得している。
ここで手に入るのはtesting版。だと思う。日次スナップショットはうまく起動しない場合もあるので注意。&lt;/p&gt;
&lt;p&gt;「その他のイメージ＞インストール先アーキテクチャ＞hd-media」とたどる。&lt;/p&gt;
&lt;p&gt;ここから&lt;code&gt;vmlinuz&lt;/code&gt;（カーネル）と&lt;code&gt;initrd.gz&lt;/code&gt;（初期RAMディスク）を取得する。
また、元のページから「netinst CDイメージ」も取得しておく。&lt;/p&gt;
&lt;p&gt;あとはこれを配置するだけ。USBメモリをmountし、以下のように配置する。FAT32でフォーマットしてあるとMacからでもWinからでも配置できるので便利。MacのEFIで読めるのはFATとHFS+とかだった気がするけど定かではない。FAT32なら大丈夫だった。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;ファイル&lt;/th&gt;
&lt;th align="left"&gt;配置場所&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;netinst CDイメージ（.isoファイル）&lt;/td&gt;
&lt;td align="left"&gt;USBメモリのトップ/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;vmlinuz&lt;/td&gt;
&lt;td align="left"&gt;USBメモリのトップ/boot/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;initrd.gz&lt;/td&gt;
&lt;td align="left"&gt;USBメモリのトップ/boot/&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;インストールはどうやるの？&lt;/h2&gt;
&lt;p&gt;普通にUSBメモリからEFIで起動させればOK。&lt;/p&gt;
&lt;p&gt;インストーラでパーティションを切るときに、EFI用のディレクトリを作成しないとダメ。100MBくらいで十分なはずだけど、200MBくらいを確保している。&lt;/p&gt;
&lt;p&gt;Windowsが入っているマシンとかに後からdebianを追加するときは、すでにあるEFIシステムパーティションが利用できる。もちろん、WindowsがEFIブートでインストールされていれば、の話だが。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Thu, 30 Apr 2015 12:55:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-04-30:blog/debian-install-efi.html</guid><category>debian</category><category>efi</category></item><item><title>Pelican+GitHub Pagesでブログ引っ越し</title><link>http://pman0214.github.io/blog/pelican-blog-github.html</link><description>&lt;p&gt;これまで&lt;a href="http://pman0214.blog37.fc2.com/"&gt;FC2ブログ&lt;/a&gt;にお世話になってきたが、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技術系なネタが多いため、ソースコード等が書きやすいとうれしい&lt;/li&gt;
&lt;li&gt;自在なレイアウトができるとうれしい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などの理由からGitHub Pagesを使うことにした。
あんまり書かないかもしれないけど・・・。&lt;/p&gt;
&lt;p&gt;ともあれ、Pelicanを使ってこのブログを構築したので、そのときのメモ。&lt;/p&gt;
&lt;h2&gt;Pelicanを使ったブログ構築作業&lt;/h2&gt;
&lt;h3&gt;概要&lt;/h3&gt;
&lt;p&gt;このブログはPelicanを使って静的ページを構成している。
生成に使用したソースを公開するのは気が引けるので、生成したhtmlファイル群だけを公開することとした。
このためにちょっと特殊な使い方をしている。&lt;/p&gt;
&lt;h3&gt;前提&lt;/h3&gt;
&lt;p&gt;pythonやvirtualenv、makeなどは導入されているものとする。&lt;/p&gt;
&lt;h3&gt;構築&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ローカルマシンにpelican用の環境を構築。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;適当なディレクトリを作成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir ~/blog
&lt;span class="nb"&gt;cd&lt;/span&gt; !&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;virtualenv環境でpelicanを導入。Markdownを使いたいので、Markdownも導入しておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv --system-site-packages ./
&lt;span class="nb"&gt;source &lt;/span&gt;bin/activate
pip install pelican
pip install Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt;ファイルを作成しておく。なお、&lt;code&gt;.DS_Store&lt;/code&gt;などはグローバルに無視する設定をしているので除外してある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.Python
bin/
include/
lib/
man/
local/
output/
pip-selfcheck.json
cache/
*.pyc
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pelican-quickstart&lt;/code&gt;を実行して各種設定を施す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2015/04/27追記:&lt;/strong&gt; 自分の場合は&lt;code&gt;pelicanconf.py&lt;/code&gt;の&lt;code&gt;SITEURL&lt;/code&gt;がうまく設定できていなかった。この設定ができていないとCSSのURLがまずいことになり、うまく動かない場合がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ここでいったんcommitしておくと幸せになれるかも。&lt;/li&gt;
&lt;li&gt;gitレポジトリを作成。&lt;code&gt;git status&lt;/code&gt;して出てきたファイルを追加してcommit。&lt;div class="highlight"&gt;&lt;pre&gt;git init .
git status
git add Makefile .gitignore develop_server.sh ...
git commit -m &lt;span class="s2"&gt;&amp;quot;Initial commit with pelican files.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;htmlファイル群の出力先である&lt;code&gt;output&lt;/code&gt;ディレクトリが消えないようにする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;publishconf.py&lt;/code&gt;を修正&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/publishconf.py b/publishconf.py&lt;/span&gt;
&lt;span class="gh"&gt;index 98162b2..dfb1731 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/publishconf.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/publishconf.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -16,7 +16,7 @@ RELATIVE_URLS = False&lt;/span&gt;
 FEED_ALL_ATOM = &amp;#39;feeds/all.atom.xml&amp;#39;
 CATEGORY_FEED_ATOM = &amp;#39;feeds/%s.atom.xml&amp;#39;

&lt;span class="gd"&gt;-DELETE_OUTPUT_DIRECTORY = True&lt;/span&gt;
&lt;span class="gi"&gt;+DELETE_OUTPUT_DIRECTORY = False&lt;/span&gt;

 # Following items are often useful when publishing
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Makefile&lt;/code&gt;も修正しておく。&lt;code&gt;make clean&lt;/code&gt;すると消えてしまうので。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/Makefile b/Makefile&lt;/span&gt;
&lt;span class="gh"&gt;index dc640c3..35df450 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/Makefile&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/Makefile&lt;/span&gt;
&lt;span class="gu"&gt;@@ -58,7 +58,7 @@ html:&lt;/span&gt;
        $(PELICAN) $(INPUTDIR) -o $(OUTPUTDIR) -s $(CONFFILE) $(PELICANOPTS)

 clean:
&lt;span class="gd"&gt;-   [ ! -d $(OUTPUTDIR) ] || rm -rf $(OUTPUTDIR)&lt;/span&gt;
&lt;span class="gi"&gt;+   [ ! -d $(OUTPUTDIR) ] || echo rm -rf $(OUTPUTDIR)&lt;/span&gt;

 regenerate:
        $(PELICAN) -r $(INPUTDIR) -o $(OUTPUTDIR) -s $(CONFFILE) $(PELICANOPTS)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ここで再びgit add &amp;amp; git commit。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;そのままのMarkdownではGitHubに慣れている人にはツライので、各種のライブラリ（？）を導入。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mdx_linkfyとmdx_del_insを導入。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install mdx_linkify
pip install mdx_del_ins
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;に以下を追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;MD_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;del_ins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;fenced_code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;codehilite(css_class=highlight)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tables&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;試しに記事を書いてみる&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;記事は&lt;code&gt;content&lt;/code&gt;の下に配置する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;管理を単純にするため、投稿日をファイル名とすることにした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;touch content &lt;span class="sb"&gt;`&lt;/span&gt;date +%Y%m%d&lt;span class="sb"&gt;`&lt;/span&gt;.md
open !&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先頭に各種情報を書いておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title: Pelican+GitHub Pagesでブログ引っ越し
Date: 2015-04-26 18:00
Category: カテゴリ
Tags: info, blog, python, pelican, github
Slug: pelican-blog-github  ←permanent link。「この名前+html」ファイルが生成される。
Author: pman0214
Summary: この記事の要約。
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;htmlファイル群を生成して表示してみる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;htmlファイル群を生成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make html
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;localでWebサーバを起動。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;あとはブラウザで&lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;を表示すればOK。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;テーマの変更&lt;/h3&gt;
&lt;p&gt;デフォルトはブログっぽくないので変更する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;テーマを検討する。&lt;a href="http://pelicanthemes.com/"&gt;Pelican Themes&lt;/a&gt;で確認できる。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;テーマ用レポジトリを取得する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;テーマのレポジトリをsubmoduleとして追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git submodule add git@github.com:getpelican/pelican-themes.git themes
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先ほどのテーマのディレクトリがsubmoduleであれば、それを取得する。この記事執筆時点では&lt;a href="https://github.com/jody-frankowski/blue-penguin/"&gt;blue-penguin&lt;/a&gt;を選択した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;themes
git submodule init blue-penguin
git submodule update blue-penguin
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;に以下のように設定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pelican-themes/blue-penguin&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2015/04/27追記:&lt;/strong&gt; 間違ってます。正しくはこうです。&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;themes/blue-penguin&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;公開用レポジトリの設定&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;GitHubに&lt;code&gt;blog&lt;/code&gt;という名前のレポジトリを作成。ここに公開用のhtmlファイル群をpushする。自分は&lt;a href="https://github.com/pman0214/blog"&gt;https://github.com/pman0214/blog&lt;/a&gt;を作成した。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;output&lt;/code&gt;の下をレポジトリにしてしまえばOK。ただし、レポジトリのGitHub Pageを使うため、&lt;code&gt;gh-pages&lt;/code&gt;ブランチにcommit &amp;amp; pushする必要がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;output&lt;/code&gt;ディレクトリをgitレポジトリにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;output
git init ./
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gh-pages&lt;/code&gt;ブランチに切り替え。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git checkout -b gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全ファイルをadd、そしてcommit。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add *
git commit -m &lt;span class="s2"&gt;&amp;quot;Article `date +%Y%m%d`.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHubにpushできるようにする。自分の場合はこんな感じ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git remote add origin git@github.com:pman0214/blog.git
git push origin gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公開されたページを確認する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://account.github.com/repository&lt;/code&gt;でアクセスできるはず。&lt;/li&gt;
&lt;li&gt;このブログは&lt;a href="http://pman0214.github.io/blog"&gt;http://pman0214.github.io/blog&lt;/a&gt;となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参考ページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.sotm.jp/2014/01/04/Pelican-Markdown-GithubPages-install-guide/"&gt;Human as a Serviceな日々 - Pelican + Markdown + GitHub Pagesで管理するブログの作り方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;Amy Hanlon - Migrating to GitHub Pages using Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/5t111111/items/d745af778969bf00f038"&gt;Qiita - PelicanでGitHub Flavored Markdown(GFM)をマジで使いたい！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Sun, 26 Apr 2015 18:00:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-04-26:blog/pelican-blog-github.html</guid><category>info</category><category>blog</category><category>python</category><category>pelican</category><category>github</category></item></channel></rss>