<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pLog</title><link>http://pman0214.github.io/blog/</link><description></description><atom:link href="http://pman0214.github.io/blog/feeds/rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 27 Nov 2017 00:00:00 +0900</lastBuildDate><item><title>BIOS, UEFI両方で起動可能なdebianインストールUSBメディアを作る</title><link>http://pman0214.github.io/blog/debian-install-bios-efi.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pman0214.github.io/blog/debian-install-efi.html"&gt;EFIブートするUSBメモリでdebianをインストール&lt;/a&gt;においてEFIブートするUSBメモリを作成してDebianをインストールする手順を説明したが、少し内容が古くなってしまっていてうまく適用できない。
新しい手順を作るついでにBIOS、UEFIの両方で起動するUSBメディアを作ってインストールすることにした。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;前提&lt;/h2&gt;
&lt;p&gt;母艦となるLinuxマシンが必要。
EFI起動のLinuxでないとダメなので注意。
ない場合はVirtualBoxなどでDebianを用意する。
というか自分はそうした。
以下の手順ではDebian 9.2を利用した。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;パーティション作成&lt;/h3&gt;
&lt;p&gt;まずはgdiskを使ってパーティションを作成する。
BIOSのための領域（MBR）部分を空けておいてもできるのかもしれないが、念のためBIOS boot partitionとして確保しておく。&lt;/p&gt;
&lt;p&gt;今回の例では某会議でもらったProceedingsが入っている8GBのディスク（ただしMacでFATで初期化済み）を用いることとする。&lt;/p&gt;
&lt;p&gt;USBメディアは &lt;tt class="docutils literal"&gt;/dev/sdb&lt;/tt&gt; にあるとする。
&lt;tt class="docutils literal"&gt;sudo dmesg&lt;/tt&gt; などで確認しておくこと。&lt;/p&gt;
&lt;p&gt;まずは現在の状態を確認。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo gdisk -l /dev/sdb
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;GPT fdisk (gdisk) version 1.0.1

Partition table scan:
  MBR: MBR only
  BSD: not present
  APM: not present
  GPT: not present


***************************************************************
Found invalid GPT and valid MBR; converting MBR to GPT format
in memory.
***************************************************************


Warning! Secondary partition table overlaps the last partition by
33 blocks!
You will need to delete this partition or resize it in another utility.
Disk /dev/sdb: 15728640 sectors, 7.5 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 15728606
Partitions will be aligned on 8-sector boundaries
Total free space is 22 sectors (11.0 KiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1              56        15728639   7.5 GiB     0700  Microsoft basic data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なにやらおかしいとエラーが出てるが気にしない。
消えてもらうぜ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo gdisk /dev/sdb
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;GPT fdisk (gdisk) version 1.0.1

Partition table scan:
  MBR: MBR only
  BSD: not present
  APM: not present
  GPT: not present


***************************************************************
Found invalid GPT and valid MBR; converting MBR to GPT format
in memory. THIS OPERATION IS POTENTIALLY DESTRUCTIVE! Exit by
typing &amp;#39;q&amp;#39; if you don&amp;#39;t want to convert your MBR partitions
to GPT format!
***************************************************************


Warning! Secondary partition table overlaps the last partition by
33 blocks!
You will need to delete this partition or resize it in another utility.

Command (? for help): d
Using 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BIOS boot partitionを作成するという人もいるようだが、その領域を空けていれば特に問題ないので作成しないこととする。&lt;/p&gt;
&lt;p&gt;EFI Systemパーティションを作成。
サイズは適当に256Mとした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Command &lt;span class="o"&gt;(&lt;/span&gt;? &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: n
Partition number &lt;span class="o"&gt;(&lt;/span&gt;1-128, default 1&lt;span class="o"&gt;)&lt;/span&gt;:
First sector &lt;span class="o"&gt;(&lt;/span&gt;34-15728606, &lt;span class="nv"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 2048&lt;span class="o"&gt;)&lt;/span&gt; or &lt;span class="o"&gt;{&lt;/span&gt;+-&lt;span class="o"&gt;}&lt;/span&gt;size&lt;span class="o"&gt;{&lt;/span&gt;KMGTP&lt;span class="o"&gt;}&lt;/span&gt;:
Last sector &lt;span class="o"&gt;(&lt;/span&gt;2048-15728606, &lt;span class="nv"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 15728606&lt;span class="o"&gt;)&lt;/span&gt; or &lt;span class="o"&gt;{&lt;/span&gt;+-&lt;span class="o"&gt;}&lt;/span&gt;size&lt;span class="o"&gt;{&lt;/span&gt;KMGTP&lt;span class="o"&gt;}&lt;/span&gt;: +256M
Current &lt;span class="nb"&gt;type &lt;/span&gt;is &lt;span class="s1"&gt;&amp;#39;Linux filesystem&amp;#39;&lt;/span&gt;
Hex code or GUID &lt;span class="o"&gt;(&lt;/span&gt;L to show codes, &lt;span class="nv"&gt;Enter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 8300&lt;span class="o"&gt;)&lt;/span&gt;: ef00
Changed &lt;span class="nb"&gt;type &lt;/span&gt;of partition to &lt;span class="s1"&gt;&amp;#39;EFI System&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;続いてインストールメディアやgrubファイルを置くためのパーティション。
ディスクサイズが小さいので残り全部。
SSDを使って同じようなインストールメディアを作ったときは8GBのパーティションとした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Command &lt;span class="o"&gt;(&lt;/span&gt;? &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: n
Partition number &lt;span class="o"&gt;(&lt;/span&gt;2-128, default 2&lt;span class="o"&gt;)&lt;/span&gt;:
First sector &lt;span class="o"&gt;(&lt;/span&gt;34-15728606, &lt;span class="nv"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 526336&lt;span class="o"&gt;)&lt;/span&gt; or &lt;span class="o"&gt;{&lt;/span&gt;+-&lt;span class="o"&gt;}&lt;/span&gt;size&lt;span class="o"&gt;{&lt;/span&gt;KMGTP&lt;span class="o"&gt;}&lt;/span&gt;:
Last sector &lt;span class="o"&gt;(&lt;/span&gt;526336-15728606, &lt;span class="nv"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 15728606&lt;span class="o"&gt;)&lt;/span&gt; or &lt;span class="o"&gt;{&lt;/span&gt;+-&lt;span class="o"&gt;}&lt;/span&gt;size&lt;span class="o"&gt;{&lt;/span&gt;KMGTP&lt;span class="o"&gt;}&lt;/span&gt;:
Current &lt;span class="nb"&gt;type &lt;/span&gt;is &lt;span class="s1"&gt;&amp;#39;Linux filesystem&amp;#39;&lt;/span&gt;
Hex code or GUID &lt;span class="o"&gt;(&lt;/span&gt;L to show codes, &lt;span class="nv"&gt;Enter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 8300&lt;span class="o"&gt;)&lt;/span&gt;: 0700
Changed &lt;span class="nb"&gt;type &lt;/span&gt;of partition to &lt;span class="s1"&gt;&amp;#39;Microsoft basic data&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで完成。
確認して書き込み。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Command &lt;span class="o"&gt;(&lt;/span&gt;? &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: p
Disk /dev/sdb: &lt;span class="m"&gt;15728640&lt;/span&gt; sectors, 7.5 GiB
Logical sector size: &lt;span class="m"&gt;512&lt;/span&gt; bytes
Disk identifier &lt;span class="o"&gt;(&lt;/span&gt;GUID&lt;span class="o"&gt;)&lt;/span&gt;: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
Partition table holds up to &lt;span class="m"&gt;128&lt;/span&gt; entries
First usable sector is 34, last usable sector is 15728606
Partitions will be aligned on 2048-sector boundaries
Total free space is &lt;span class="m"&gt;0&lt;/span&gt; sectors &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;

Number  Start &lt;span class="o"&gt;(&lt;/span&gt;sector&lt;span class="o"&gt;)&lt;/span&gt;    End &lt;span class="o"&gt;(&lt;/span&gt;sector&lt;span class="o"&gt;)&lt;/span&gt;  Size       Code  Name
   &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;2048&lt;/span&gt;          &lt;span class="m"&gt;526335&lt;/span&gt;   256.0 MiB   EF00  EFI System
   &lt;span class="m"&gt;2&lt;/span&gt;          &lt;span class="m"&gt;526336&lt;/span&gt;        &lt;span class="m"&gt;15728606&lt;/span&gt;   7.2 GiB     &lt;span class="m"&gt;0700&lt;/span&gt;  Microsoft basic data

Command &lt;span class="o"&gt;(&lt;/span&gt;? &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: w

Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING
PARTITIONS!!

Do you want to proceed? &lt;span class="o"&gt;(&lt;/span&gt;Y/N&lt;span class="o"&gt;)&lt;/span&gt;: y
OK&lt;span class="p"&gt;;&lt;/span&gt; writing new GUID partition table &lt;span class="o"&gt;(&lt;/span&gt;GPT&lt;span class="o"&gt;)&lt;/span&gt; to /dev/sdb.
The operation has completed successfully.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;念のため確認。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo gdisk -l /dev/sdb
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;GPT fdisk (gdisk) version 1.0.1

Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present

Found valid GPT with protective MBR; using GPT.
Disk /dev/sdb: 15728640 sectors, 7.5 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 15728606
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048          526335   256.0 MiB   EF00  EFI System
   2          526336        15728606   7.2 GiB     0700  Microsoft basic data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;FAT32でフォーマットする。
&lt;tt class="docutils literal"&gt;mkfs.vfat&lt;/tt&gt; がないという人は &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;apt-get&lt;/span&gt; install dosfstools&lt;/tt&gt; する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mkfs.vfat -F32 /dev/sdb1
sudo mkfs.vfat -F32 /dev/sdb2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお、EFI SystemパーティションはFATにしないとダメだが、インストールメディアやgrubファイルを置くためのパーティションは別にFATにする必要はない。
ただ、ファイルを書き換えるときに楽というだけの話。
変更したい場合は↑でパーティションを作成するときにGUIDもちゃんと変更すること。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="grub-mbr"&gt;
&lt;h3&gt;grubのインストール（MBR編）&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;grub-pc&lt;/span&gt;&lt;/tt&gt; をインストールする。
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;grub-efi&lt;/span&gt;&lt;/tt&gt; が一旦アンインストールされるが気にしたら負け。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install -y grub-pc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インストールメディアやgrubファイルを置くためのパーティションをマウントして、bootディレクトリを指定してインストール。
blocklistsが何たらとエラーになるので、 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--force&lt;/span&gt;&lt;/tt&gt; を付けて実行する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mount /dev/sdb2 /mnt
sudo grub-install --target&lt;span class="o"&gt;=&lt;/span&gt;i386-pc --boot-directory&lt;span class="o"&gt;=&lt;/span&gt;/mnt/boot --force /dev/sdb
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Installing for i386-pc platform.
grub-install: warning: this GPT partition label contains no BIOS Boot Partition; embedding won&amp;#39;t be possible.
grub-install: warning: Embedding is not possible.  GRUB can only be installed in this setup by using blocklists.  However, blocklists are UNRELIABLE and their use is discouraged..
Installation finished. No error reported.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;何か色々と言われるが、 &lt;tt class="docutils literal"&gt;No error reported.&lt;/tt&gt; なのできっと問題ないだろう。
これで &lt;tt class="docutils literal"&gt;/mnt/boot/grub&lt;/tt&gt; に色々なファイルができてるはず。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="grub-efi"&gt;
&lt;h3&gt;grubのインストール（EFI編）&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;grub-efi&lt;/span&gt;&lt;/tt&gt; を再び導入する。
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;grub-pc&lt;/span&gt;&lt;/tt&gt; はアンインストールされる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install -y grub-efi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;マウントポイントが足りないので、EFI用ディレクトリを作ってEFI Systemパーティションをマウントして使う。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mkdir /mnt/boot/efi
sudo mount /dev/sdb1 /mnt/boot/efi
sudo grub-install --target&lt;span class="o"&gt;=&lt;/span&gt;x86_64-efi --efi-directory&lt;span class="o"&gt;=&lt;/span&gt;/mnt/boot/efi --boot-directory&lt;span class="o"&gt;=&lt;/span&gt;/mnt/boot
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Installing for x86_64-efi platform.
Installation finished. No error reported.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;grub-installではremovable media用にいい感じのEFIブートファイルを作ってくれないのでコピーする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mkdir /mnt/boot/efi/EFI/BOOT
sudo cp /mnt/boot/efi/EFI/debian/grubx64.efi /mnt/boot/efi/EFI/BOOT/BOOTX64.EFI
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;tt class="docutils literal"&gt;/mnt/boot/efi&lt;/tt&gt; の下はこんな感じのディレクトリ構成になるはず。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ls -FR /mnt/boot/efi
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/mnt/boot/efi:
EFI/

/mnt/boot/efi/EFI:
BOOT/  debian/

/mnt/boot/efi/EFI/BOOT:
BOOTX64.EFI*

/mnt/boot/efi/EFI/debian:
grubx64.efi*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;アンマウントして完成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo umount /mnt/boot/efi
sudo umount /mnt
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;インストールメディアとインストーラカーネルの配置&lt;/h2&gt;
&lt;p&gt;ここまで来たら自分はMacで作業している。
&lt;tt class="docutils literal"&gt;/dev/sdb2&lt;/tt&gt; をFAT32でフォーマットしているので、Macに接続すると &lt;tt class="docutils literal"&gt;NO NAME&lt;/tt&gt; というボリュームが現れるので、ISOイメージとカーネル、ルートイメージを配置する。&lt;/p&gt;
&lt;p&gt;ISOイメージとカーネル、ルートイメージは &lt;a class="reference external" href="https://www.debian.org/distrib/netinst"&gt;インターネット経由の Debian のインストール&lt;/a&gt; から取得する。
「小さな CD または USB メモリ」のamd64をダウンロードし、そのISOファイルを &lt;tt class="docutils literal"&gt;NO NAME&lt;/tt&gt; ボリュームにコピーする。
これを書いている時点では &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;debian-9.2.1-amd64-netinst.iso&lt;/span&gt;&lt;/tt&gt; が最新の模様。&lt;/p&gt;
&lt;p&gt;カーネル類は「ネットワークブート」のamd64から &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;hd-media&lt;/span&gt;&lt;/tt&gt; の中の &lt;tt class="docutils literal"&gt;vmlinuz&lt;/tt&gt; と &lt;tt class="docutils literal"&gt;initrd.gz&lt;/tt&gt; を取得して &lt;tt class="docutils literal"&gt;NO NAME&lt;/tt&gt; ボリュームの &lt;tt class="docutils literal"&gt;boot&lt;/tt&gt; ディレクトリにコピーする。&lt;/p&gt;
&lt;p&gt;あとは以下のような &lt;tt class="docutils literal"&gt;grub.cfg&lt;/tt&gt; を作成して &lt;tt class="docutils literal"&gt;NO NAME&lt;/tt&gt; ボリュームの &lt;tt class="docutils literal"&gt;boot/grub&lt;/tt&gt; ディレクトリに配置する。
&lt;tt class="docutils literal"&gt;(hd0,gpt2)&lt;/tt&gt; は &lt;tt class="docutils literal"&gt;boot&lt;/tt&gt; が入っているディスク、パーティションを指定している。
パーティション番号が↑と違う場合は適宜書き換える。&lt;/p&gt;
&lt;p&gt;それと、マシンによっては &lt;tt class="docutils literal"&gt;video=efifb&lt;/tt&gt; ではうまく表示できないかもしれない。
手元にあるHP EliteBook 820では &lt;tt class="docutils literal"&gt;video=vesafb&lt;/tt&gt; でないとインストーラ起動後に表示が崩れた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Load Graphical modules
insmod efi_gop
insmod efi_uga

# Load Font module
insmod font


# Setup GFXTERM along with loading unicode.pf2 font file

if loadfont ${prefix}/fonts/unicode.pf2
then
   insmod gfxterm
   set gfxmode=&amp;quot;auto&amp;quot;
   set gfxpayload=keep
   terminal_output gfxterm

   set color_normal=light-blue/black
   set color_highlight=light-cyan/blue
fi

insmod part_gpt
insmod part_msdos
insmod fat
insmod ext2

# Timeout for menu
set timeout=5

# Set default boot entry as Entry 0
set default=0

menuentry &amp;quot;Debian Install (expert mode)&amp;quot; {
  set root=(hd0,gpt2)
  linux /boot/vmlinuz root=/dev/sda1 ro video=efifb agp=off priority=low ipv6.disable=1
  initrd /boot/initrd.gz
}
menuentry &amp;quot;Debian Install&amp;quot; {
  set root=(hd0,gpt2)
  linux /boot/vmlinuz root=/dev/sda1 ro video=efifb agp=off ipv6.disable=1
  initrd /boot/initrd.gz
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このメディアのいいところは、grubを更新せずとも新しいインストールイメージを導入できるところ。
ISOとカーネル類のみ新しいものに入れ替えればOK。&lt;/p&gt;
&lt;p&gt;なお、testingをインストールする場合はdaily build版を &lt;a class="reference external" href="https://www.debian.org/devel/debian-installer/"&gt;ここ&lt;/a&gt; から取得すると良い。&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Mon, 27 Nov 2017 00:00:00 +0900</pubDate><guid>tag:pman0214.github.io,2017-11-27:blog/debian-install-bios-efi.html</guid><category>debian</category><category>bios</category><category>efi</category><category>install</category></item><item><title>ieicej.clsのfigure環境内でminipageしたときにキャプションがおかしくなる件</title><link>http://pman0214.github.io/blog/ieice-figure-minipage.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;p&gt;電子情報通信学会の &lt;tt class="docutils literal"&gt;ieicej.cls&lt;/tt&gt; を使ってTeXで原稿を書くときに、細いカラムの中に縦長の図を横に2つ並べたいときがたまにある。
このように書いて図を2つ並べようとする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;figure&lt;span class="nb"&gt;}&lt;/span&gt;[bt]
 &lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;minipage&lt;span class="nb"&gt;}{&lt;/span&gt;.49&lt;span class="k"&gt;\hsize&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\centering&lt;/span&gt;
  &lt;span class="k"&gt;\fbox&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\rule&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;0pt&lt;span class="nb"&gt;}{&lt;/span&gt;2cm&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\rule&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;2cm&lt;span class="nb"&gt;}{&lt;/span&gt;0pt&lt;span class="nb"&gt;}}&lt;/span&gt;
  &lt;span class="k"&gt;\caption&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;figure環境内でminipageすると，長いcaptionは折り返されないので
  絶望せざるをえない&lt;span class="nb"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;minipage&lt;span class="nb"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;\hfill&lt;/span&gt;
 &lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;minipage&lt;span class="nb"&gt;}{&lt;/span&gt;.49&lt;span class="k"&gt;\hsize&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\centering&lt;/span&gt;
  &lt;span class="k"&gt;\fbox&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\rule&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;0pt&lt;span class="nb"&gt;}{&lt;/span&gt;2cm&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\rule&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;2cm&lt;span class="nb"&gt;}{&lt;/span&gt;0pt&lt;span class="nb"&gt;}}&lt;/span&gt;
  &lt;span class="k"&gt;\caption&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;figure環境内でminipageすると，長いcaptionは折り返されないので
  絶望せざるをえない2&lt;span class="nb"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;minipage&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;figure&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、長いキャプションがあることで大変残念なことになった。
誠に遺憾である。&lt;/p&gt;
&lt;img alt="figure_in_minipage" src="images/figure_in_minipage.png" /&gt;
&lt;p&gt;そこで、プリアンブルに以下を記述する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\makeatletter&lt;/span&gt;
&lt;span class="k"&gt;\newif\ifcap&lt;/span&gt;@minipage
&lt;span class="k"&gt;\cap&lt;/span&gt;@minipagefalse
&lt;span class="k"&gt;\let\minipagebak\minipage&lt;/span&gt;
&lt;span class="k"&gt;\def\minipage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\cap&lt;/span&gt;@minipagetrue&lt;span class="k"&gt;\minipagebak&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\let\@&lt;/span&gt;captionbak&lt;span class="k"&gt;\@&lt;/span&gt;caption
&lt;span class="k"&gt;\def\@&lt;/span&gt;caption&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="c"&gt;%&lt;/span&gt;
 &lt;span class="k"&gt;\ifcap&lt;/span&gt;@minipage
  &lt;span class="k"&gt;\capwidth\hsize\ecapwidth\hsize&lt;/span&gt;
 &lt;span class="k"&gt;\fi&lt;/span&gt;
 &lt;span class="k"&gt;\@&lt;/span&gt;captionbak&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\makeatother&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;するとどうであろう。&lt;/p&gt;
&lt;img alt="figure_in_minipage_success" src="images/figure_in_minipage_success.png" /&gt;
&lt;p&gt;きちんと折り返されて表示されるではないか！&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;解説&lt;/h2&gt;
&lt;p&gt;minipage環境内でのcaption幅調整がうまくできていない。
minipage環境内では &lt;tt class="docutils literal"&gt;\hsize&lt;/tt&gt; を基準にcaption幅を決めるべきところが、 &lt;tt class="docutils literal"&gt;\textwidth&lt;/tt&gt; を基準に決められている。
なので無理矢理変更してやる。&lt;/p&gt;
&lt;p&gt;自分でフラグを導入し、これを参照してキャプションの幅を設定してやる。
minipageやcaptionの定義を変更するのが面倒なので、  &lt;tt class="docutils literal"&gt;\let&lt;/tt&gt; でコピーしておいてその頭に必要な処理を加えている。
メモリを無駄にしてるけど、昨今のマシンでは問題ないだろう。
ちゃんとfalseにクリアしてないような気がしなくもないけど、気にするなということで。&lt;/p&gt;
&lt;p&gt;ちなみに、minipage環境に入ると &lt;tt class="docutils literal"&gt;if&amp;#64;minipage&lt;/tt&gt; フラグがtrueにsetされる。
なのでこれを参照しようかと思ったが、minipage環境内で最初の要素を出力する際の縦方向のスペース調整に利用された後にfalseに変更されてしまうようだ。
図のキャプションのようにminipage環境の一番下でcaptionを出力する場合には &lt;tt class="docutils literal"&gt;if&amp;#64;minipage&lt;/tt&gt; フラグはすでにfalseに変更された後となる。&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Tue, 08 Aug 2017 10:00:00 +0900</pubDate><guid>tag:pman0214.github.io,2017-08-08:blog/ieice-figure-minipage.html</guid><category>tex</category><category>ieice</category></item><item><title>Debianパッケージを作成する</title><link>http://pman0214.github.io/blog/debian-package.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概要と前提&lt;/h2&gt;
&lt;p&gt;研究で作成したソフトを使った評価など、たくさんのマシンに自作のソフトをインストールする必要が生じた場合にインストール作業を行うのは手間だ。
自分はいつもDebianを使うので、Debianパッケージを作成してインストールすることで簡単にインストールできるようにした。&lt;/p&gt;
&lt;p&gt;C++で書いた場合などには &lt;tt class="docutils literal"&gt;waf&lt;/tt&gt; を使っているのでインストール・アンインストールはそんなに面倒ではない。
ここではCで書いて &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; しているものと想定する。
以下のようなファイルがあるものとする。&lt;/p&gt;
&lt;div class="section" id="main-c"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;main.c&lt;/tt&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * MIT License&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * Copyright (c) 2017 pman0214&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * Permission is hereby granted, free of charge, to any person obtaining a copy&lt;/span&gt;
&lt;span class="cm"&gt; * of this software and associated documentation files (the &amp;quot;Software&amp;quot;), to deal&lt;/span&gt;
&lt;span class="cm"&gt; * in the Software without restriction, including without limitation the rights&lt;/span&gt;
&lt;span class="cm"&gt; * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&lt;/span&gt;
&lt;span class="cm"&gt; * copies of the Software, and to permit persons to whom the Software is&lt;/span&gt;
&lt;span class="cm"&gt; * furnished to do so, subject to the following conditions:&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * The above copyright notice and this permission notice shall be included in all&lt;/span&gt;
&lt;span class="cm"&gt; * copies or substantial portions of the Software.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * THE SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&lt;/span&gt;
&lt;span class="cm"&gt; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&lt;/span&gt;
&lt;span class="cm"&gt; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&lt;/span&gt;
&lt;span class="cm"&gt; * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&lt;/span&gt;
&lt;span class="cm"&gt; * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&lt;/span&gt;
&lt;span class="cm"&gt; * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&lt;/span&gt;
&lt;span class="cm"&gt; * SOFTWARE.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* end of main.c */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="makefile"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# MIT License&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Copyright (c) 2017 pman0214&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Permission is hereby granted, free of charge, to any person obtaining a copy&lt;/span&gt;
&lt;span class="c"&gt;# of this software and associated documentation files (the &amp;quot;Software&amp;quot;), to deal&lt;/span&gt;
&lt;span class="c"&gt;# in the Software without restriction, including without limitation the rights&lt;/span&gt;
&lt;span class="c"&gt;# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&lt;/span&gt;
&lt;span class="c"&gt;# copies of the Software, and to permit persons to whom the Software is&lt;/span&gt;
&lt;span class="c"&gt;# furnished to do so, subject to the following conditions:&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# The above copyright notice and this permission notice shall be included in all&lt;/span&gt;
&lt;span class="c"&gt;# copies or substantial portions of the Software.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# THE SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&lt;/span&gt;
&lt;span class="c"&gt;# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&lt;/span&gt;
&lt;span class="c"&gt;# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&lt;/span&gt;
&lt;span class="c"&gt;# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&lt;/span&gt;
&lt;span class="c"&gt;# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&lt;/span&gt;
&lt;span class="c"&gt;# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&lt;/span&gt;
&lt;span class="c"&gt;# SOFTWARE.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;

&lt;span class="nv"&gt;CC&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt;gcc
&lt;span class="nv"&gt;TARGET&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;-app
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt;-Wall
&lt;span class="nv"&gt;OBJ&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt;main.o
&lt;span class="nv"&gt;bindir&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt;/usr/bin

&lt;span class="c"&gt;# main target&lt;/span&gt;
&lt;span class="nf"&gt;$(TARGET)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;OBJ&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
     &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt; -o&lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="nv"&gt;$^&lt;/span&gt;

&lt;span class="nf"&gt;main.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;.&lt;span class="n"&gt;c&lt;/span&gt;
     &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -c &lt;span class="nv"&gt;$^&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;span class="nf"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;TARGET&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
     install -pd &lt;span class="k"&gt;$(&lt;/span&gt;DESTDIR&lt;span class="k"&gt;)$(&lt;/span&gt;bindir&lt;span class="k"&gt;)&lt;/span&gt;
     install -pm &lt;span class="m"&gt;755&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;TARGET&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;DESTDIR&lt;span class="k"&gt;)$(&lt;/span&gt;bindir&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Cleaning&lt;/span&gt;
&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     -@&lt;span class="k"&gt;$(&lt;/span&gt;RM&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OBJ&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;必要パッケージの導入&lt;/h2&gt;
&lt;p&gt;何のパッケージが必要なのかがやや怪しい。
とりあえず以下は必要なはず。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install devscripts build-essential lintian
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;tt class="docutils literal"&gt;fakeroot&lt;/tt&gt; や &lt;tt class="docutils literal"&gt;debuild&lt;/tt&gt; もインストールされるはず。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;debian/&lt;/tt&gt; ディレクトリを作成する&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% mkdir debian
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="debian-control"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;debian/control&lt;/tt&gt; ファイルを作成する&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;debian/control&lt;/tt&gt; にはパッケージの情報を書く。
パッケージ名や依存関係、説明などを書く。
どんなフィールドがあるかは &lt;a class="reference external" href="https://www.debian.org/doc/debian-policy/"&gt;Debian Policy Manual (Declaring relationships between packages)&lt;/a&gt; を参照のこと。
&lt;tt class="docutils literal"&gt;Source&lt;/tt&gt; と &lt;tt class="docutils literal"&gt;Package&lt;/tt&gt; のそれぞれについて使えるフィールドが異なるので注意すること。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;Source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;-&lt;span class="n"&gt;test&lt;/span&gt;-&lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="nf"&gt;Maintainer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pman&lt;/span&gt;0214 &amp;lt;&lt;span class="n"&gt;hoge&lt;/span&gt;@&lt;span class="n"&gt;example&lt;/span&gt;.&lt;span class="n"&gt;com&lt;/span&gt;&amp;gt;
&lt;span class="nf"&gt;Build-Depends&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gcc&lt;/span&gt;
&lt;span class="nf"&gt;Section&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;utils&lt;/span&gt;

&lt;span class="nf"&gt;Package&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;-&lt;span class="n"&gt;test&lt;/span&gt;-&lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="nf"&gt;Priority&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;optional&lt;/span&gt;
&lt;span class="nf"&gt;Architecture&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;
&lt;span class="nf"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;
 This package provides my Debian package &lt;span class="nb"&gt;test &lt;/span&gt;application.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="debian-changelog"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;debian/changelog&lt;/tt&gt; ファイルを作成する&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;dch&lt;/tt&gt; コマンドを使用すると良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% dch -i --create
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;テンプレートが開くはず。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PACKAGE (VERSION) UNRELEASED; urgency=medium

  * Initial release. (Closes: #XXXXXX)

 --  &amp;lt;hoge@example.com&amp;gt;  Sun, 21 May 2017 17:30:00 +0900
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを参考にして書き換える。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;my-test-app (0.1) unstable; urgency=low

  * Initial release.

 --  pman0214 &amp;lt;hoge@example.com&amp;gt;  Sun, 21 May 2017 17:30:00 +0900
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="debian-rules"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;debian/rules&lt;/tt&gt; ファイルを作成する&lt;/h3&gt;
&lt;p&gt;このファイルはこのパッケージをビルド・インストールするときの &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; と思えばいい。
今回の場合はすでに &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; があるのでこれを呼べばいい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/make -f&lt;/span&gt;

&lt;span class="nf"&gt;%&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     dh &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="debian-copyright"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;debian/copyright&lt;/tt&gt; ファイルを作成する&lt;/h3&gt;
&lt;p&gt;ライセンス情報を入れておけば良い。
空でもOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;MIT License

Copyright (c) 2017 pman0214

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &amp;quot;Software&amp;quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="debuild"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;debuild&lt;/tt&gt; する&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% debuild -us -uc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで1つ上のディレクトリにdebファイルができる。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;インストールしてみる&lt;/h2&gt;
&lt;p&gt;試しにインストールしてみよう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo dpkg -i ../my-test-app_0.1_all.deb
% ls /usr/bin/test-app
/usr/bin/test-app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;きちんと入ったようだ。
削除してみる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo dpkg -r my-test-app
% ls /usr/bin/test-app
ls: cannot access /usr/bin/test-app: No such file or directory
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;きちんと削除できた。&lt;/p&gt;
&lt;p&gt;パッケージでどんなファイルが入るかは以下で確認できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% dpkg --contents ../my-test-app_0.1_all.deb
drwxr-xr-x root/root         &lt;span class="m"&gt;0&lt;/span&gt; 2017-05-22 08:47 ./
drwxr-xr-x root/root         &lt;span class="m"&gt;0&lt;/span&gt; 2017-05-22 08:47 ./usr/
drwxr-xr-x root/root         &lt;span class="m"&gt;0&lt;/span&gt; 2017-05-22 08:47 ./usr/share/
drwxr-xr-x root/root         &lt;span class="m"&gt;0&lt;/span&gt; 2017-05-22 08:47 ./usr/share/doc/
drwxr-xr-x root/root         &lt;span class="m"&gt;0&lt;/span&gt; 2017-05-22 08:47 ./usr/share/doc/my-test-app/
-rw-r--r-- root/root      &lt;span class="m"&gt;1071&lt;/span&gt; 2017-05-21 17:48 ./usr/share/doc/my-test-app/copyright
-rw-r--r-- root/root       &lt;span class="m"&gt;142&lt;/span&gt; 2017-05-21 17:40 ./usr/share/doc/my-test-app/changelog.gz
drwxr-xr-x root/root         &lt;span class="m"&gt;0&lt;/span&gt; 2017-05-22 08:47 ./usr/bin/
-rwxr-xr-x root/root      &lt;span class="m"&gt;6712&lt;/span&gt; 2017-05-22 08:47 ./usr/bin/test-app
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Mon, 22 May 2017 09:00:00 +0900</pubDate><guid>tag:pman0214.github.io,2017-05-22:blog/debian-package.html</guid><category>debian</category><category>linux</category><category>dpkg</category></item><item><title>Pandas DataFrameで日時データのタイムゾーン変換</title><link>http://pman0214.github.io/blog/pandas-tz-convert.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="timestamp"&gt;
&lt;h2&gt;TimeStampデータのタイムゾーン変換問題&lt;/h2&gt;
&lt;p&gt;PandasでTimeStampデータのタイムゾーンを変換する場合には少し気をつけないといけない。
例を使って説明していく。&lt;/p&gt;
&lt;p&gt;以下のような &lt;tt class="docutils literal"&gt;test.csv&lt;/tt&gt; というデータファイルがあるとする。
時刻データがUTCであるとし、JSTに変換したいと仮定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;2016-03-19 03:49:12,168
2016-03-19 03:50:11,110
2016-03-30 02:10:30,9
2016-03-30 02:12:47,36
2016-03-30 02:15:03,113
2016-03-30 02:29:03,17
2016-03-30 02:31:03,8
2016-03-30 02:37:36,14
2016-03-30 02:40:37,11
2016-03-30 23:13:23,199
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まずはPandasでこれを読み込む。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;on_create&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
             &lt;span class="n"&gt;on_create&lt;/span&gt;  &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;168&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;110&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;      &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;     &lt;span class="mi"&gt;36&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;    &lt;span class="mi"&gt;113&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;     &lt;span class="mi"&gt;17&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;      &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;  &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;     &lt;span class="mi"&gt;14&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;     &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;    &lt;span class="mi"&gt;199&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現時点では &lt;tt class="docutils literal"&gt;on_create&lt;/tt&gt; 列は文字列になっているので、TimeStamp型に変換する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_create&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_create&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_create&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tslib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Timestamp&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Padasには &lt;tt class="docutils literal"&gt;tz_convert&lt;/tt&gt; なるものがあるのでこれを適用してみる。
が、エラーを食らってしまう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz_convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Asia/Tokyo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;DatetimeIndex&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;PeriodIndex&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DataFrameの列（Series）に対して適用しても同じ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_create&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz_convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Asia/Tokyo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;DatetimeIndex&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;PeriodIndex&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;どうすればいいか？&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;tz_convert&lt;/tt&gt; はindexに対して適用する手法らしい。
なので、以下のようにindexに変換してから適用する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DatetimeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;on_create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;タイムゾーンが指定されていないのでUTCとして指定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz_localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;UTC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;タイムゾーンをJSTに変換する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz_convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Asia/Tokyo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
                                    &lt;span class="n"&gt;on_create&lt;/span&gt;  &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="n"&gt;on_create&lt;/span&gt;
&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;168&lt;/span&gt;
&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;110&lt;/span&gt;
&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;      &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;     &lt;span class="mi"&gt;36&lt;/span&gt;
&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;    &lt;span class="mi"&gt;113&lt;/span&gt;
&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;     &lt;span class="mi"&gt;17&lt;/span&gt;
&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;      &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;     &lt;span class="mi"&gt;14&lt;/span&gt;
&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;     &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;    &lt;span class="mi"&gt;199&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もちろん以下のようにして一気に適用してもOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DatetimeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;on_create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz_localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;UTC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz_convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Asia/Tokyo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;indexのままでも使えるが、必要があれば元のデータをタイムゾーン変換済みデータで置き換え、indexを振り直す。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_create&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
                  &lt;span class="n"&gt;on_create&lt;/span&gt;  &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;    &lt;span class="mi"&gt;168&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;    &lt;span class="mi"&gt;110&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;      &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;     &lt;span class="mi"&gt;36&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;    &lt;span class="mi"&gt;113&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;     &lt;span class="mi"&gt;17&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;      &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;     &lt;span class="mi"&gt;14&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;     &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;    &lt;span class="mi"&gt;199&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;PandasのDataFrameでTimeStamp型を使うならindexにしとけ！&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Fri, 21 Oct 2016 16:25:00 +0900</pubDate><guid>tag:pman0214.github.io,2016-10-21:blog/pandas-tz-convert.html</guid><category>python</category><category>pandas</category><category>timezone</category></item><item><title>Python RPi.GPIOのOpenWrtパッケージを作ってみた</title><link>http://pman0214.github.io/blog/openwrt-python-rpi-gpio.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;Raspberry PiにRaspbianを載せるとちょっと重くなるので、自分は &lt;a class="reference external" href="https://openwrt.org/"&gt;OpenWrt&lt;/a&gt; を載せることが多い。&lt;/p&gt;
&lt;p&gt;Raspberry Piを使うならばGPIOが使えなければ始まらない（←何が!?）。
最近はPythonでコードを書いているので &lt;a class="reference external" href="https://pypi.python.org/pypi/RPi.GPIO"&gt;RPi.GPIOパッケージ&lt;/a&gt; を入れようとpipを走らせたものの、ビルドはめっちゃ遅いし &lt;tt class="docutils literal"&gt;Python.hがないよ！&lt;/tt&gt; と怒られたので、メロスは激怒してパッケージ化しようと決意した。&lt;/p&gt;
&lt;p&gt;Image Generatorを使って作成したパッケージを含むイメージを作成するところまでやっちゃう。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;前提&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;OpenWrtの &lt;a class="reference external" href="https://wiki.openwrt.org/jp/about/toolchain"&gt;Buildroot&lt;/a&gt; がすでに使える。&lt;/li&gt;
&lt;li&gt;Raspberry Pi用の &lt;tt class="docutils literal"&gt;.config&lt;/tt&gt; はすでに用意してある。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.openwrt.org/doc/howto/obtain.firmware.generate"&gt;Image Generator&lt;/a&gt; も用意してある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ビルド機はDebian 8.0。&lt;/li&gt;
&lt;li&gt;ビルド対象はChaos Calmer 15.05。&lt;/li&gt;
&lt;li&gt;ターゲットマシンはRaspberry Pi。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;やり方&lt;/h2&gt;
&lt;div class="section" id="makefile"&gt;
&lt;h3&gt;パッケージビルド用Makefileの作成&lt;/h3&gt;
&lt;p&gt;パッケージ用のソースはネットのどこかにあるものである場合が多いので、それを自動的に取得してきてパッケージ化するための &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; を書けばOK。&lt;/p&gt;
&lt;p&gt;自分が書いたものは &lt;a class="reference external" href="https://github.com/pman0214/python_rpi/blob/master/python-rpi-gpio/Makefile"&gt;Githubで公開&lt;/a&gt; している。
書き方はOpenWrtのドキュメントを見ても良いし、Buildrootの &lt;tt class="docutils literal"&gt;feeds/packages/&lt;/tt&gt; の下にあるテキトーなパッケージの &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; を見るのがとても参考になる。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="feed"&gt;
&lt;h3&gt;パッケージ提供feedの作成&lt;/h3&gt;
&lt;p&gt;OpenWrtでは新しいパッケージを追加する場合にfeedというものを追加する。
なので作成したパッケージを追加するfeedを用意する。&lt;/p&gt;
&lt;p&gt;と言っても、作成したパッケージ用Makefileが入ったディレクトリを含むgitレポジトリを用意すればいいだけ。
自分の場合、 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-rpi-gpio&lt;/span&gt;&lt;/tt&gt; パッケージを作成したので &lt;a class="reference external" href="https://github.com/pman0214/python_rpi"&gt;feed用レポジトリ&lt;/a&gt; の構成は以下のようになった。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pman0214/python_rpi"&gt;python_rpiレポジトリ&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;python-rpi-gpio/&lt;ul&gt;
&lt;li&gt;Makefile&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LICENSE&lt;/li&gt;
&lt;li&gt;README.rst&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;外に公開する場合にはきちんとLICENSEを定義してあげよう。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;feedの追加&lt;/h3&gt;
&lt;p&gt;Buildrootのfeed設定に今作成したfeed用レポジトリを追加してやる。
こんな感じ。
&lt;tt class="docutils literal"&gt;feeds.conf&lt;/tt&gt; に空行を入れたらエラーになった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% vi feeds.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
src-git python_rpi https://github.com/pman0214/python_rpi.git
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;src-git&lt;/span&gt;&lt;/tt&gt; と書いていることから、もしかするとgit以外も使えるのかもしれない。
ドキュメント参照ということで。&lt;/p&gt;
&lt;p&gt;あとは普通に、feedを取得してパッケージをインストール。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% ./scripts/feeds update python_rpi
% ./scripts/feeds install python-rpi-gpio
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;updateで &lt;tt class="docutils literal"&gt;feeds/&lt;/tt&gt; の下に &lt;tt class="docutils literal"&gt;python_rpi&lt;/tt&gt; というディレクトリが作成される。
これはfeed用レポジトリのmasterだけを &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--single-branch&lt;/span&gt;&lt;/tt&gt; でcloneしたもの。&lt;/p&gt;
&lt;p&gt;installを実行すると &lt;tt class="docutils literal"&gt;packages/feeds/&lt;/tt&gt; の下に &lt;tt class="docutils literal"&gt;python_rpi&lt;/tt&gt; というディレクトリが作成され、その下にinstallしたパッケージのリンクが作成される。
このディレクトリにあるものは &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; したときに呼び出されるということのようだ。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="make"&gt;
&lt;h3&gt;働いたらmake！&lt;/h3&gt;
&lt;p&gt;手順は &lt;a class="reference external" href="https://wiki.openwrt.org/doc/howtobuild/single.package"&gt;How to Build a Single Package&lt;/a&gt; に書いてある。
まずはツール類をビルドする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% make tools/install
% make toolchain/install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そしてパッケージをビルドする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% make package/python-rpi-gpip/compile
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;Image Generatorでパッケージにアクセス&lt;/h3&gt;
&lt;p&gt;Image Generatorの &lt;tt class="docutils literal"&gt;repositories.conf&lt;/tt&gt; の上の方にコメントアウトしてある行を参考にして、以下のように書く。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;src custom file:///usr/src/openwrt/bin/brcm2708/packages
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで、 &lt;tt class="docutils literal"&gt;/usr/src/openwrt&lt;/tt&gt; がBuildrootへのパス。
今回のターゲットマシンはRaspberry Piなので、ビルドしたパッケージは &lt;tt class="docutils literal"&gt;bin/brcm2708/packages/&lt;/tt&gt; に格納されている。&lt;/p&gt;
&lt;p&gt;あとはImage Generatorの &lt;tt class="docutils literal"&gt;PACKAGES&lt;/tt&gt; で自分の作成したパッケージを指定すればOK。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;追記（2016-04-25 18:15）&lt;/h2&gt;
&lt;p&gt;一番メモしたいと思っていた情報を書き忘れていた。
パッケージをビルドしただけでは &lt;tt class="docutils literal"&gt;Packages&lt;/tt&gt; や &lt;tt class="docutils literal"&gt;Packages.gz&lt;/tt&gt; が存在しないため、 &lt;tt class="docutils literal"&gt;repositories.conf&lt;/tt&gt; を書き換えてもエラーになる。
パッケージを新たに追加した場合はBuildrootにおいて再インデックスが必要。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% make package/index
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Mon, 25 Apr 2016 18:15:00 +0900</pubDate><guid>tag:pman0214.github.io,2016-04-25:blog/openwrt-python-rpi-gpio.html</guid><category>linux</category><category>openwrt</category><category>openwrt package</category><category>raspberry pi</category></item><item><title>Gnuplot 5で破線とか</title><link>http://pman0214.github.io/blog/gnuplot-dashed-line.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="motivation"&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;gnuplot&lt;/tt&gt; を使うときには &lt;tt class="docutils literal"&gt;line style&lt;/tt&gt; を定義してそれを参照することで線種や点種を指定している。
gnuplotが5.0になって破線の表示ができなくなったので調べたら、どうやら指定方法が変わったらしい。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;これまで&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.gnuplot&lt;/span&gt;&lt;/tt&gt; を作成して &lt;tt class="docutils literal"&gt;set line style&lt;/tt&gt; していた。
こんな感じ。
&lt;tt class="docutils literal"&gt;linetype&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;lt&lt;/tt&gt;) によって線種が変更されていた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;style&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="n"&gt;lt&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;lc&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;style&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="n"&gt;lt&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;lc&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;style&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="n"&gt;lt&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;lc&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#008800&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;style&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="n"&gt;lt&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;lc&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#EE00EE&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;style&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="n"&gt;lt&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;lc&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#EE8811&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;style&lt;/span&gt; &lt;span class="n"&gt;increment&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;プロットする側ではこんな感じにして &lt;tt class="docutils literal"&gt;eps enhanced&lt;/tt&gt; を指定して出力。
&lt;tt class="docutils literal"&gt;color&lt;/tt&gt; を消せばモノクロになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;term&lt;/span&gt; &lt;span class="n"&gt;postscript&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt; &lt;span class="n"&gt;enhanced&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TimesNewRoman&amp;quot;&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;output&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hoge.eps&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;plot&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hoge.dat&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;u&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nb"&gt;w&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; \
     &lt;span class="s"&gt;&amp;quot;hoge.dat&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;u&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nb"&gt;w&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;5.0から&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;dashtype&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;dt&lt;/tt&gt;) というのを使って破線の形を指定できるようになったらしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;style&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;                       &lt;span class="n"&gt;lw&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;lc&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;style&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="nf"&gt;dt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             &lt;span class="n"&gt;lw&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;lc&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;style&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="nf"&gt;dt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="n"&gt;lw&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;lc&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#008800&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;style&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="nf"&gt;dt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="n"&gt;lw&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;lc&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#EE00EE&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;style&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="nf"&gt;dt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;lc&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#EE8811&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;style&lt;/span&gt; &lt;span class="n"&gt;increment&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは同じ。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;ターミナルテスト&lt;/h2&gt;
&lt;p&gt;点の種類や線の種類、 &lt;tt class="docutils literal"&gt;dashtype&lt;/tt&gt; の例はターミナルテストをすると得ることができる。
自分はEPSを出力した後にPDF化して保存し、必要なときに参照している。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;output&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gnuplot_eps-test.eps&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;term&lt;/span&gt; &lt;span class="n"&gt;postscript&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt; &lt;span class="n"&gt;enhanced&lt;/span&gt;
&lt;span class="k"&gt;test&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;output&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gnuplot_eps_color-test.eps&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;term&lt;/span&gt; &lt;span class="n"&gt;postscript&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt; &lt;span class="n"&gt;enhanced&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;
&lt;span class="k"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Mon, 11 Apr 2016 12:40:00 +0900</pubDate><guid>tag:pman0214.github.io,2016-04-11:blog/gnuplot-dashed-line.html</guid><category>gnuplot</category><category>line style</category></item><item><title>LaTeXiTで日本語を使う</title><link>http://pman0214.github.io/blog/latexit-japanese.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;PowerPointやKeynoteでプレゼンを作るときに数式があると、入力がとても面倒だ。
そんなとき、OSXユーザなら &lt;a class="reference external" href="http://www.chachatelier.fr/latexit/"&gt;LaTeXiT&lt;/a&gt; を利用しているユーザも多いかと思う。&lt;/p&gt;
&lt;p&gt;しかし、LaTeXiTでは &lt;tt class="docutils literal"&gt;pdflatex&lt;/tt&gt; を使用してPDFイメージを作成しているため、そのままの設定では日本語を表示できない。
ここでは設定方法をメモとして残す。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;OSはEl Capitan 10.11.3。&lt;/li&gt;
&lt;li&gt;LaTeXiTのバージョンは2.8.0。&lt;/li&gt;
&lt;li&gt;TeXはHomebrewで入れたTeX Live 2015のもの。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% platex --version
e-pTeX 3.14159265-p3.6-141210-2.6 &lt;span class="o"&gt;(&lt;/span&gt;utf8.euc&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;TeX Live 2015&lt;span class="o"&gt;)&lt;/span&gt;
kpathsea version 6.2.1
ptexenc version 1.3.3
Copyright &lt;span class="m"&gt;2015&lt;/span&gt; D.E. Knuth.
There is NO warranty.  Redistribution of this software is
covered by the terms of both the e-pTeX copyright and
the Lesser GNU General Public License.
For more information about these matters, see the file
named COPYING and the e-pTeX source.
Primary author of e-pTeX: Peter Breitenlohner.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;設定&lt;/h2&gt;
&lt;p&gt;プリアンブルは &lt;tt class="docutils literal"&gt;amsmath&lt;/tt&gt; と &lt;tt class="docutils literal"&gt;amssymb&lt;/tt&gt; だけ有効化していれば十分。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://farm2.staticflickr.com/1651/25055344419_e0ee6de555_z.jpg"&gt;&lt;img alt="latexit-config-1" src="https://farm2.staticflickr.com/1651/25055344419_e0ee6de555_z.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;タイプセット設定で、 &lt;tt class="docutils literal"&gt;latex+dvipdf&lt;/tt&gt; を使うように変更する。
その上で、 &lt;tt class="docutils literal"&gt;platex&lt;/tt&gt; と &lt;tt class="docutils literal"&gt;dvipdfmx&lt;/tt&gt; のパスを指定。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://farm2.staticflickr.com/1642/25422906615_8aaa3b9a7e_z.jpg"&gt;&lt;img alt="latexit-config-2" src="https://farm2.staticflickr.com/1642/25422906615_8aaa3b9a7e_z.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これだけ。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;日本語の書き方&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;\mbox&lt;/tt&gt; に入れて書けばOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\mathrm&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;F&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\mbox&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;値&lt;span class="nb"&gt;}&lt;/span&gt; &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt;= &lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;2 &lt;span class="k"&gt;\cdot&lt;/span&gt; &lt;span class="k"&gt;\mathrm&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Precision&lt;span class="nb"&gt;}&lt;/span&gt; &lt;span class="k"&gt;\cdot&lt;/span&gt;
&lt;span class="k"&gt;\mathrm&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Recall&lt;span class="nb"&gt;}}{&lt;/span&gt;&lt;span class="k"&gt;\mathrm&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Precision&lt;span class="nb"&gt;}&lt;/span&gt; + &lt;span class="k"&gt;\mathrm&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Recall&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Wed, 02 Mar 2016 09:06:00 +0900</pubDate><guid>tag:pman0214.github.io,2016-03-02:blog/latexit-japanese.html</guid><category>osx</category><category>latex</category></item><item><title>El Capitan用にEmacs 24.5をビルドする</title><link>http://pman0214.github.io/blog/el-capitan-emacs-24.5.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;これまで10.9 Mavericksを使い続けてきたが、評判がよろしいので手持ちのマシンの1台に10.11 El Capitanをインストールした。
クリーンインストールしたので特に大きな問題は発生していないのだが、前のマシンからコピーしたEmacsでカーソル移動とともに表示が消える現象が発生したので、この度新しくビルドすることにした。&lt;/p&gt;
&lt;p&gt;ビルド方法を説明するブログ等はたくさんあるのだが、 &lt;code&gt;/usr/local&lt;/code&gt; の下に一部のファイルが入るなど他のマシンにコピーするには都合の悪い部分がある。
このため、 &lt;code&gt;Emacs.app&lt;/code&gt; を &lt;code&gt;/Applications&lt;/code&gt; にコピーさえすればとりあえず動く状態になるものをビルドすることにした。&lt;/p&gt;
&lt;p&gt;なお、他のマシンにはまだコピーしていないのできちんと動くのか不明。
ちなみに、10.9のマシンにコピーしても動かなかった。。。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://qiita.com/scalper/items/7d779824d5e96353710b"&gt;El Capitanで Emacs-24.5 をビルドして動かす&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ほぼ手順通りだが、 &lt;code&gt;Emacs.app&lt;/code&gt; の中に各種ファイルが無理矢理入るようにした。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;p&gt;まずはソースを取得して展開する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% mkdir ~/build
% &lt;span class="nb"&gt;cd&lt;/span&gt; !&lt;span class="err"&gt;$&lt;/span&gt;
% curl -LO http://ftp.gnu.org/pub/gnu/emacs/emacs-24.5.tar.xz
% curl -LO ftp://ftp.math.s.chiba-u.ac.jp/emacs/emacs-24.5-mac-5.11.tar.gz
% tar Jxvf emacs-24.5.tar.xz
% tar zxvf emacs-24.5-mac-5.11.tar.gz
% &lt;span class="nb"&gt;cd &lt;/span&gt;emacs-24.5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パッチを当てて必要ファイルをコピーする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% patch -p1 &amp;lt; ../emacs-24.5-mac-5.11/patch-mac
% cp -R ../emacs-24.5-mac-5.11/mac mac
% cp ../emacs-24.5-mac-5.11/src/* src
% cp ../emacs-24.5-mac-5.11/lisp/term/mac-win.el lisp/term
% cp nextstep/Cocoa/Emacs.base/Contents/Resources/Emacs.icns mac/Emacs.app/Contents/Resources/Emacs.icns
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;confiugreする。
このとき、 &lt;code&gt;--prefix&lt;/code&gt; を指定し、使用時にEmacs.appがインストールされるであろう場所に各種ファイルがインストールされるようにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% ./configure --with-mac --without-x --prefix&lt;span class="o"&gt;=&lt;/span&gt;/Applications/Emacs.app/Contents/MacOS
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このディレクトリは多分作成しておかなければならない。
古いバージョンのEmacsを使っている場合は移動しておくこと。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% mv /Applications/Emacs.app /Applications/Emacs_24.4.app
% mkdir -p /Applications/Emacs.app/Contents/MacOS
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ビルドしてインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% make
% make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; で &lt;code&gt;mac/Emacs.app&lt;/code&gt; が作られるのだが、一部のファイル &lt;code&gt;/Applications/Emacs.app/Contents/MacOS&lt;/code&gt; に入る。
なのでこれをコピーする。
&lt;code&gt;MacOS&lt;/code&gt; の後の &lt;code&gt;/&lt;/code&gt; をつけないと残念なことになるので注意。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd &lt;/span&gt;mac/Emacs.app/Contents/MacOS
% rsync -avrz -e cp /Applications/Emacs.app/Contents/MacOS/ ./
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Emacs.app&lt;/code&gt; の偽物を消して本物をコピーする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; ../../..
% rm -rf /Applications/Emacs.app
% cp -r Emacs.app /Applications/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="yatex"&gt;
&lt;h2&gt;ついでにYaTeXを入れる&lt;/h2&gt;
&lt;p&gt;仕事柄 &lt;a class="reference external" href="https://www.yatex.org/"&gt;YaTeX&lt;/a&gt; をよく使うので &lt;code&gt;Emacs.app&lt;/code&gt; に同梱しておく。
この記事を執筆時点の最新版は1.78.4。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; ~/build
% curl -LO https://www.yatex.org/yatex1.78.4.tar.gz
% tar zxvf yatex1.78.4.tar.gz
% &lt;span class="nb"&gt;cd &lt;/span&gt;yatex1.78.4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Makefile&lt;/code&gt; を直接編集する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="nv"&gt;EMACS&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; /Applications/Emacs.app/Contents/MacOS/Emacs
&lt;span class="nv"&gt;PREFIX&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; /Applications/Emacs.app/Contents/MacOS
&lt;span class="nv"&gt;EMACSDIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/share/emacs
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; すればOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% make install
% make insta-yahtml
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;おわりに&lt;/h2&gt;
&lt;p&gt;このメモは後から作成しているため、間違いがあるかもしれない・・・。&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Fri, 18 Dec 2015 19:45:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-12-18:blog/el-capitan-emacs-24.5.html</guid><category>osx</category><category>emacs</category><category>yatex</category></item><item><title>軽量CSSフレームワークPure.cssで異なる単位のグリッドを作成する</title><link>http://pman0214.github.io/blog/pure-css-new-unit-grid.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;最近、Webサイトを構築するときに &lt;a class="reference external" href="http://purecss.io/"&gt;Pure.css&lt;/a&gt; というCSSフレームワークを使用している。
Pure.cssはとても軽いCSSフレームワークで、提供されている機能は少ないが使い勝手がとてもいいので重宝している。&lt;/p&gt;
&lt;p&gt;CSSフレームワークを使ったレイアウトの基本はグリッドシステムを使うことだと思うのだが、提供されているグリッドではどうにもならない事態が発生した。
Pure.cssでは任意の単位のグリッドを生成できるプログラム &lt;a class="reference external" href="https://github.com/yahoo/rework-pure-grids"&gt;rework-pure-grids&lt;/a&gt; を提供してくれているので、これを使って自分の好きなグリッドを生成することにした。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;ことの発端&lt;/h2&gt;
&lt;p&gt;4:3の画像が3枚あるとする。
1つは横長、2つが縦長である。
これを、高さを揃えて横に3枚並べたい。&lt;/p&gt;
&lt;p&gt;Pure.cssはブラウザの横幅を1として1/5ベースと1/24ベースのグリッドを提供してくれるのだが、上記の要求はこのグリッドでは満たせない。
横長の画像の幅をA、縦長の画像の幅をBとすると B = (9A)/16 となるため、1/9ベースのグリッドが欲しくなった。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/yahoo/rework-pure-grids"&gt;rework-pure-grids&lt;/a&gt; はNode.jsを使用するため、Node.jsを導入する。
Macの場合はHomebrewでnodebrewを導入し、最新安定版を導入すれば良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% brew install nodebrew
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Homebrewで入れてもPATHが通らないので、 &lt;code&gt;~/.bashrc&lt;/code&gt; などにPATHの設定を追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.nodebrew/current/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;つづいてNode.js本体をインストールする。
インストール可能なバージョンを確認。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% nodebrew ls-remote
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで &lt;code&gt;io&amp;#64;&lt;/code&gt; というのが付いていないやつが安定版。
だと思う。
この記事を書いている現時点での最新版は5.1.0。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% nodebrew install-binary v5.1.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2015/11/27追記ここから&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Failed to create the file&lt;/code&gt; などというエラーになることがある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fetch: http://nodejs.org/dist/v5.1.0/node-v5.1.0-darwin-x64.tar.gz
Warning: Failed to create the file
Warning: /Users/pman0214/.nodebrew/src/v5.1.0/node-v5.1.0-darwin-x64.tar.gz: No such file or directory
                                                                           0.0%
 curl: &lt;span class="o"&gt;(&lt;/span&gt;23&lt;span class="o"&gt;)&lt;/span&gt; Failed writing body &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; 2493&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この場合には、今表示されたディレクトリを手動で作成してやればいい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% mkdir -p /Users/pman0214/.nodebrew/src/v5.1.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2015/11/27追記ここまで&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Node.jsの本家サーバが遅いと時間がかかるかもしれない。&lt;/p&gt;
&lt;p&gt;インストールしたバージョンを使う宣言をする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% nodebrew use v5.1.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでNode.jsが使えるようになった。&lt;/p&gt;
&lt;p&gt;Node.jsの使い方がイマイチよく分かっていないのだが、とりあえず、 &lt;code&gt;rework-pure-grids&lt;/code&gt; の説明にある通り &lt;code&gt;rework&lt;/code&gt; と &lt;code&gt;rework-pure-grids&lt;/code&gt; をインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% npm install rework rework-pure-grids
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;node_modules&lt;/code&gt; というディレクトリが作成され、その中に &lt;code&gt;rework&lt;/code&gt; と &lt;code&gt;rework-pure-grids&lt;/code&gt; 、依存するパッケージがインストールされる。&lt;/p&gt;
&lt;p&gt;ここまで来たらグリッドを生成するための簡単なプログラムを書く。
&lt;a class="reference external" href="https://github.com/yahoo/rework-pure-grids"&gt;rework-pure-grids&lt;/a&gt; にある書き方を参考にして、今回は1/9ベースのグリッドを生成するプログラムを書く。
ここでは &lt;code&gt;app.js&lt;/code&gt; という名前で保存することにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rework&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rework&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;pureGrids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rework-pure-grids&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Creates a 9ths-based Grid.&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rework&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pureGrids&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;units&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mediaQueries&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;screen and (min-width: 35.5em)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;md&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;screen and (min-width: 48em)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;lg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;screen and (min-width: 64em)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;xl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;screen and (min-width: 80em)&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを実行するとグリッド用のCSSが出力されるので、ファイルに保存する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% node app.js &amp;gt; pure-grid-1-9.css
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに &lt;code&gt;sys&lt;/code&gt; を使うのは古いやり方だというWarningが出た。
が、新しいやり方は調べていない・・・。&lt;/p&gt;
&lt;p&gt;Pure.cssでは、例えば1/5幅の &lt;code&gt;div&lt;/code&gt; を作るときに &lt;code&gt;&amp;lt;div class=&amp;quot;pure-u-1-5&amp;quot;&amp;gt;&lt;/code&gt; などと書く。
生成した &lt;code&gt;pure-grid-1-9.css&lt;/code&gt; をHTMLファイルで読み込めば、この書き方と同じように &lt;code&gt;&amp;lt;div class=&amp;quot;pure-u-1-9&amp;quot;&amp;gt;&lt;/code&gt; などと書けるようになる。
CSSファイルを小さくしたいなら &lt;code&gt;tr&lt;/code&gt; コマンドで改行とスペースを削除すればいい。&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Fri, 27 Nov 2015 19:31:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-11-18:blog/pure-css-new-unit-grid.html</guid><category>html</category><category>css framework</category></item><item><title>Valgrindでのメモリリークチェックがおかしい件</title><link>http://pman0214.github.io/blog/valgrind-bug.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;プログラム開発時に有用な &lt;a class="reference external" href="http://valgrind.org/"&gt;Valgrind&lt;/a&gt; というツールがある。
Valgrindは色々なツールを提供してくれる。
この記事を書いた時点では以下のように書かれていて、6つのツールが提供されているとのこと。&lt;/p&gt;
&lt;blockquote&gt;
The Valgrind distribution currently includes six production-quality tools: a memory error detector, two thread error detectors, a cache and branch-prediction profiler, a call-graph generating cache and branch-prediction profiler, and a heap profiler.&lt;/blockquote&gt;
&lt;p&gt;今回はこの中でもメモリチェックツールのお話。
Linux上でpthreadを使用している場合に常にメモリリークとなってしまう件。&lt;/p&gt;
&lt;p&gt;環境は以下。
Vagrantで作成したdebian sid。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% uname -a
Linux debian 4.2.0-1-amd64 &lt;span class="c"&gt;#1 SMP Debian 4.2.6-1 (2015-11-10) x86_64 GNU/Linux&lt;/span&gt;
% valgrind --version
valgrind-3.11.0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;再現手順&lt;/h2&gt;
&lt;p&gt;メモリリークしないコード &lt;code&gt;test.c&lt;/code&gt; を用意する。
&lt;code&gt;pthread_create&lt;/code&gt; して &lt;code&gt;pthread_join&lt;/code&gt; するだけの簡単なお仕事。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;pthread.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;pthread_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;pthread_t&lt;/span&gt; &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pthread_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pthread_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;スレッドとして起動する関数 &lt;code&gt;test&lt;/code&gt; ではちょっと待ってから &lt;code&gt;pthread_exit&lt;/code&gt; するだけ。
起動元では &lt;code&gt;pthread_join&lt;/code&gt; してあげる。
これでスレッド用の資源が回収されるのでメモリリークはない。はずなのだが・・・。&lt;/p&gt;
&lt;p&gt;このプログラムをコンパイルして、valgrindを実行してみる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% gcc -Wall -g -lpthread -otest test.c
% valgrind --tool&lt;span class="o"&gt;=&lt;/span&gt;memcheck &lt;span class="se"&gt;\&lt;/span&gt;
  --leak-check&lt;span class="o"&gt;=&lt;/span&gt;yes &lt;span class="se"&gt;\&lt;/span&gt;
  --leak-resolution&lt;span class="o"&gt;=&lt;/span&gt;high &lt;span class="se"&gt;\&lt;/span&gt;
  --num-callers&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --undef-value-errors&lt;span class="o"&gt;=&lt;/span&gt;no &lt;span class="se"&gt;\&lt;/span&gt;
  --run-libc-freeres&lt;span class="o"&gt;=&lt;/span&gt;no &lt;span class="se"&gt;\&lt;/span&gt;
  -v ./test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;結果は以下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;==1424== Memcheck, a memory error detector
==1424== Copyright (C) 2002-2015, and GNU GPL&amp;#39;d, by Julian Seward et al.
==1424== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1424== Command: ./test
==1424==
--1424-- Valgrind options:
--1424--    --tool=memcheck
--1424--    --leak-check=yes
--1424--    --leak-resolution=high
--1424--    --num-callers=40
--1424--    --undef-value-errors=no
--1424--    --run-libc-freeres=no
--1424--    -v
--1424-- Contents of /proc/version:
--1424--   Linux version 4.2.0-1-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.3 (Debian 4.9.3-5) ) #1 SMP Debian 4.2.6-1 (2015-11-10)
--1424--
--1424-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-rdtscp-sse3-avx
--1424-- Page sizes: currently 4096, max supported 4096
--1424-- Valgrind library directory: /usr/lib/valgrind
--1424-- Reading syms from /home/vagrant/tmp/test
--1424-- Reading syms from /lib/x86_64-linux-gnu/ld-2.19.so
--1424--   Considering /lib/x86_64-linux-gnu/ld-2.19.so ..
--1424--   .. CRC mismatch (computed 809091d5 wanted 33fd79cd)
--1424--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/ld-2.19.so ..
--1424--   .. CRC is valid
--1424-- Reading syms from /usr/lib/valgrind/memcheck-amd64-linux
--1424--   Considering /usr/lib/valgrind/memcheck-amd64-linux ..
--1424--   .. CRC mismatch (computed 2611121c wanted fdf174ed)
--1424--   Considering /usr/lib/debug/usr/lib/valgrind/memcheck-amd64-linux ..
--1424--   .. CRC is valid
--1424--    object doesn&amp;#39;t have a dynamic symbol table
--1424-- Scheduler: using generic scheduler lock implementation.
--1424-- Reading suppressions file: /usr/lib/valgrind/default.supp
==1424== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-1424-by-vagrant-on-???
==1424== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-1424-by-vagrant-on-???
==1424== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-1424-by-vagrant-on-???
==1424==
==1424== TO CONTROL THIS PROCESS USING vgdb (which you probably
==1424== don&amp;#39;t want to do, unless you know exactly what you&amp;#39;re doing,
==1424== or are doing some strange experiment):
==1424==   /usr/lib/valgrind/../../bin/vgdb --pid=1424 ...command...
==1424==
==1424== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==1424==   /path/to/gdb ./test
==1424== and then give GDB the following command
==1424==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=1424
==1424== --pid is optional if only one valgrind process is running
==1424==
--1424-- REDIR: 0x4017960 (ld-linux-x86-64.so.2:strlen) redirected to 0x3809e1b1 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--1424-- Reading syms from /usr/lib/valgrind/vgpreload_core-amd64-linux.so
--1424--   Considering /usr/lib/valgrind/vgpreload_core-amd64-linux.so ..
--1424--   .. CRC mismatch (computed 0900b121 wanted bb491432)
--1424--   Considering /usr/lib/debug/usr/lib/valgrind/vgpreload_core-amd64-linux.so ..
--1424--   .. CRC is valid
--1424-- Reading syms from /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so
--1424--   Considering /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so ..
--1424--   .. CRC mismatch (computed d60576bf wanted 177f5f93)
--1424--   Considering /usr/lib/debug/usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so ..
--1424--   .. CRC is valid
==1424== WARNING: new redirection conflicts with existing -- ignoring it
--1424--     old: 0x04017960 (strlen              ) R-&amp;gt; (0000.0) 0x3809e1b1 vgPlain_amd64_linux_REDIR_FOR_strlen
--1424--     new: 0x04017960 (strlen              ) R-&amp;gt; (2007.0) 0x04c2c0e0 strlen
--1424-- REDIR: 0x4017710 (ld-linux-x86-64.so.2:index) redirected to 0x4c2bc80 (index)
--1424-- REDIR: 0x4017930 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4c2d190 (strcmp)
--1424-- REDIR: 0x4018660 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4c303b0 (mempcpy)
--1424-- Reading syms from /lib/x86_64-linux-gnu/libpthread-2.19.so
--1424--   Considering /lib/x86_64-linux-gnu/libpthread-2.19.so ..
--1424--   .. CRC mismatch (computed f433f5b8 wanted a1539920)
--1424--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/libpthread-2.19.so ..
--1424--   .. CRC is valid
--1424-- Reading syms from /lib/x86_64-linux-gnu/libc-2.19.so
--1424--   Considering /lib/x86_64-linux-gnu/libc-2.19.so ..
--1424--   .. CRC mismatch (computed f7678cca wanted c4a92976)
--1424--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.19.so ..
--1424--   .. CRC is valid
--1424-- REDIR: 0x50d7e20 (libc.so.6:strcasecmp) redirected to 0x4a23730 (_vgnU_ifunc_wrapper)
--1424-- REDIR: 0x50da110 (libc.so.6:strncasecmp) redirected to 0x4a23730 (_vgnU_ifunc_wrapper)
--1424-- REDIR: 0x50d75f0 (libc.so.6:memcpy@GLIBC_2.2.5) redirected to 0x4a23730 (_vgnU_ifunc_wrapper)
--1424-- REDIR: 0x50d5970 (libc.so.6:rindex) redirected to 0x4c2b960 (rindex)
--1424-- REDIR: 0x50ce990 (libc.so.6:calloc) redirected to 0x4c2ab60 (calloc)
--1424-- REDIR: 0x50de7b0 (libc.so.6:strchrnul) redirected to 0x4c2fee0 (strchrnul)
--1424-- REDIR: 0x50d77d0 (libc.so.6:__GI_mempcpy) redirected to 0x4c300e0 (__GI_mempcpy)
--1424-- REDIR: 0x50ce020 (libc.so.6:malloc) redirected to 0x4c28be0 (malloc)
--1424-- Reading syms from /lib/x86_64-linux-gnu/libgcc_s.so.1
--1424--   Considering /lib/x86_64-linux-gnu/libgcc_s.so.1 ..
--1424--   .. CRC mismatch (computed de5828bf wanted 0f4d8de1)
--1424--    object doesn&amp;#39;t have a symbol table
--1424-- REDIR: 0x50d3c70 (libc.so.6:strlen) redirected to 0x4c2c020 (strlen)
--1424-- REDIR: 0x50ce660 (libc.so.6:free) redirected to 0x4c29e40 (free)
==1424==
==1424== HEAP SUMMARY:
==1424==     in use at exit: 1,942 bytes in 6 blocks
==1424==   total heap usage: 6 allocs, 0 frees, 1,942 bytes allocated
==1424==
==1424== Searching for pointers to 6 not-freed blocks
==1424== Checked 8,483,328 bytes
==1424==
==1424== 272 bytes in 1 blocks are possibly lost in loss record 4 of 6
==1424==    at 0x4C2AC15: calloc (vg_replace_malloc.c:711)
==1424==    by 0x4010FE1: allocate_dtv (dl-tls.c:296)
==1424==    by 0x40116ED: _dl_allocate_tls (dl-tls.c:460)
==1424==    by 0x4E3DC27: allocate_stack (allocatestack.c:589)
==1424==    by 0x4E3DC27: pthread_create@@GLIBC_2.2.5 (pthread_create.c:495)
==1424==    by 0x400728: main (test.c:16)
==1424==
==1424== LEAK SUMMARY:
==1424==    definitely lost: 0 bytes in 0 blocks
==1424==    indirectly lost: 0 bytes in 0 blocks
==1424==      possibly lost: 272 bytes in 1 blocks
==1424==    still reachable: 1,670 bytes in 5 blocks
==1424==         suppressed: 0 bytes in 0 blocks
==1424== Reachable blocks (those to which a pointer was found) are not shown.
==1424== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==1424==
==1424== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
==1424== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この部分が「リークしているかも」と言われている。
これは明らかに &lt;code&gt;pthread_create&lt;/code&gt; した分。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;==1424== 272 bytes in 1 blocks are possibly lost in loss record 4 of 6
==1424==    at 0x4C2AC15: calloc (vg_replace_malloc.c:711)
==1424==    by 0x4010FE1: allocate_dtv (dl-tls.c:296)
==1424==    by 0x40116ED: _dl_allocate_tls (dl-tls.c:460)
==1424==    by 0x4E3DC27: allocate_stack (allocatestack.c:589)
==1424==    by 0x4E3DC27: pthread_create@@GLIBC_2.2.5 (pthread_create.c:495)
==1424==    by 0x400728: main (test.c:16)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;うーむ・・・。&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Tue, 17 Nov 2015 16:42:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-11-17:blog/valgrind-bug.html</guid><category>pthread</category><category>valgrind</category></item><item><title>Debianでautofsを使う</title><link>http://pman0214.github.io/blog/debian-autofs.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;各ユーザのホームをファイルサーバにまとめている場合は各ユーザのホームディレクトリをオートマウントしたくなることがある。
こんなときにはautofsを使ってそのディレクトリを使用するときだけマウントすればいいのだが、いつも導入手順を忘れるのでメモ代わりにここにまとめることにした。
以下の手順はLDAPクライアントの設定が終わっていて正常にログインできることを確認していることを前提とする。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;p&gt;何はともあれNFSで当該のディレクトリをマウントできるようにしておかなければ始まらない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install nfs-kernel-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NFSサーバ側ではきちんと &lt;code&gt;/etc/exports&lt;/code&gt; が設定されているものとする。
この段階でとりあえずmountできることを確認しておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo vi /etc/fstab
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
xx.xx.xx.xx:/home /home nfs  defaults    0   0  ★xxの部分はNFSサーバのIPを指定する
...
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo mount /home
% ls /home
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;確認できたらunmountしておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo umount /home
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;autofsをインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install autofs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;/etc&lt;/code&gt; に &lt;code&gt;auto.master&lt;/code&gt;, &lt;code&gt;auto.misc&lt;/code&gt;, &lt;code&gt;auto.net&lt;/code&gt;, &lt;code&gt;auto.smb&lt;/code&gt; などといったファイルができる。&lt;/p&gt;
&lt;p&gt;まずは &lt;code&gt;/etc/auto.master&lt;/code&gt; に &lt;code&gt;/home&lt;/code&gt; の設定ファイルのありかとオプションを書く。
今回はタイムアウトは300秒とした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo vi /etc/auto.master
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
/home    /etc/auto.home  --timeout 300
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;続いて、今書いた設定ファイルを編集する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo vi /etc/auto.home
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;*    -fstype=nfs4,rw xx.xx.xx.xx:/tank/home/&amp;amp;  ★xxの部分はNFSサーバのIPを指定する
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; というワイルドカードを使うことができる。
&lt;code&gt;&amp;amp;&lt;/code&gt; の部分はユーザ名で置き換えられる。&lt;/p&gt;
&lt;p&gt;ここまで書けたらautofsを再起動する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo /etc/init.d/autofs restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで誰かのホームディレクトリを &lt;code&gt;ls&lt;/code&gt; できればOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% ls /home/somebody
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Mon, 16 Nov 2015 12:05:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-11-16:blog/debian-autofs.html</guid><category>debian</category><category>ldap</category><category>autofs</category></item><item><title>GitLabのレポジトリを移動する</title><link>http://pman0214.github.io/blog/gitlab-repo-change-path.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;研究室ではGitLabを運用している。
比較的最近、新しいファイルサーバを導入したのでサーバ上の大事なデータはこの上に集めているのだが、GitLab上のレポジトリはまだ移行していなかった。&lt;/p&gt;
&lt;p&gt;なのでこの度移動させた。
ちなみにシンボリックリンクは使えないので、移動後には設定ファイルを変更するしかない。&lt;/p&gt;
&lt;p&gt;環境は以下。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;GitLab 7.0.0 de9bf7d&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;p&gt;ぶっちゃけ、かなり簡単。&lt;/p&gt;
&lt;p&gt;まず、GitLabを停止させる。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pman0214.github.io/blog/debian-gitlab.html"&gt;このブログのGitLabインストール手順&lt;/a&gt; に従っている場合、 &lt;code&gt;/etc/init.d/gitlab&lt;/code&gt; というスクリプトがあるはずなので、これを使って停止させる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo /etc/init.d/gitlab stop
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、レポジトリを移動する。
デフォルトの設定から変更していなければ、 &lt;code&gt;/home/git/repositories&lt;/code&gt; というディレクトリにレポジトリが格納されている。
ファイルサーバをNFSでマウントしているディレクトリにこのレポジトリ格納ディレクトリを移動する。
怖い場合はユーザ情報を保持したままコピーする方が良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo mv /home/git/repositories /path/to/nfs-dir/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;設定を変更する。
設定は、gitlab本体とgitlab-shellの両方に必要なので注意。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /home/git
% sudo -u git vi gitlab/config/gitlab.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# REPOS_PATH MUST NOT BE A SYMLINK!!!&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;repos_path&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/path/to/nfs-dir/repositories/  ★ここを変更する&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo -u git vi gitlab-shell/config.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;repos_path&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/path/to/nfs-dir/repositories/&amp;quot;&lt;/span&gt;  &lt;span class="l-Scalar-Plain"&gt;★ここを変更する&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでGitLabを起動させれば完了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo /etc/init.d/gitlab start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;念のため、新しいレポジトリを作成したり、git pushできるかなどを確認しよう。&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Thu, 15 Oct 2015 18:42:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-10-15:blog/gitlab-repo-change-path.html</guid><category>gitlab</category></item><item><title>Chromium on MacOSXでPPAPIなFlash Playerを使う</title><link>http://pman0214.github.io/blog/chromium-pepper-flash.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ChromeではFlash Playerが内部に入っているようだが、Flash Playerはオープンソースではないため巷に転がっているChromiumではFlash Playerが使えない。
そして、AdobeからFlash Playerを落としてきてインストールしても、なぜか使えない。&lt;/p&gt;
&lt;p&gt;どういうことだってばよ！！と思ったが、どうやら2つの原因があるようだ。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PPAPI版のFlash Playerを入れないといけない。&lt;/li&gt;
&lt;li&gt;コマンドラインオプションでPluginへのパスを指定しないといけない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PPAPI版のFlash Playerは簡単に導入できるのだが、Chromiumのアイコンをクリックして起動した場合にFlash Playerが動かないと困ったことになるサイトがたまーにあるので、コマンドラインオプションを何とか付けて起動されることにする。&lt;/p&gt;
&lt;p&gt;具体的には、Chromiumを起動するシェルスクリプトを.app化する。
&lt;a class="reference external" href="https://mathiasbynens.be/notes/shell-script-mac-apps"&gt;How to create simple Mac apps from shell scripts&lt;/a&gt; に同じようなことをする方法があるのだが、Chromiumを起動するとDockに2つのアイコンが表示されて気持ち悪いから却下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;やり方&lt;/h2&gt;
&lt;p&gt;ざっくり書くと、コマンドラインオプションを付けてChromiumを起動するシェルスクリプトを作成し、これを &lt;code&gt;Chromium.app&lt;/code&gt; 内に配置する。
これだけで予想できる人は以降を読む必要はない。&lt;/p&gt;
&lt;p&gt;なにはともあれ、「システムの環境設定」（日本語があってるか不明）のFlash Playerを開き、現状インストールされているやつを確認する。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.flickr.com/photos/23629678&amp;#64;N04/19523105128/"&gt;&lt;img alt="system-preferences" src="https://farm1.staticflickr.com/391/19523105128_c72eb6ca87.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;「Updates」タブを開くと、現在インストールされているFlash Playerのバージョンが表示される。
今回は &lt;code&gt;PPAPI Plug-in&lt;/code&gt; の方の &lt;code&gt;Check Now&lt;/code&gt; ボタンをクリックして、最新版をインストールする。
これで、 &lt;code&gt;/Library/Internet Plug-Ins/PepperFlashPlayer&lt;/code&gt; というディレクトリにインストールされるはず。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.flickr.com/photos/23629678&amp;#64;N04/19523127180/"&gt;&lt;img alt="system-pref-flash-player" src="https://farm1.staticflickr.com/355/19523127180_65bb291052.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;つづいてシェルスクリプトを作成するのだが、 &lt;code&gt;Chromium&lt;/code&gt; という名前にしたいので元のファイルの名前を変更しておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /Applications/Chromium.app/Contents/MacOS
% mv Chromium Chromium-orig
% vi Chromium
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

/Applications/Chromium.app/Contents/MacOS/Chromium-orig &lt;span class="se"&gt;\&lt;/span&gt;
  --ppapi-flash-path&lt;span class="o"&gt;=&lt;/span&gt;/Library/Internet&lt;span class="se"&gt;\ &lt;/span&gt;Plug-Ins/PepperFlashPlayer/PepperFlashPlayer.plugin &lt;span class="se"&gt;\&lt;/span&gt;
  --ppapi-flash-version&lt;span class="o"&gt;=&lt;/span&gt;18.0.0.209
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;バージョンは自分の環境に合わせて変更すること。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% chmod &lt;span class="m"&gt;755&lt;/span&gt; Chromium
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで、 &lt;code&gt;Chromium.app&lt;/code&gt; をダブルクリックしてChromiumが普通に起動するはず。&lt;/p&gt;
&lt;p&gt;Chromiumのアドレスバーに &lt;code&gt;chrome://plugins&lt;/code&gt; と入力して、Flash Playerが表示されればOK。
ダメならパスなどが間違っていないか確認する。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.flickr.com/photos/23629678&amp;#64;N04/19715724301/"&gt;&lt;img alt="check-plugin" src="https://farm1.staticflickr.com/483/19715724301_922a7be027.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作成したスクリプトはChromiumのアップデートで消える&lt;/strong&gt; ので気をつけよう。
スクリプトを &lt;code&gt;/usr/local/bin&lt;/code&gt; などに作成してシンボリックリンクを作成する方が良いかもしれない。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;アップデート多すぎ。Flash滅びろ。&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Wed, 15 Jul 2015 17:15:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-07-15:blog/chromium-pepper-flash.html</guid><category>chrome</category><category>chromium</category></item><item><title>Debian 8.0 (jessie)でLDAPサーバを構築</title><link>http://pman0214.github.io/blog/debian-ldap.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;Debian 8.0 (jessie)のslapdは2.4.40で、設定の仕方が今までとは異なるようなのでメモ。
と言っても、昔の設定方法を知っているわけではないのだが。&lt;/p&gt;
&lt;p&gt;環境は以下の通り。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% cat /etc/debian_version
8.0
% uname -a
Linux hoge 3.16.0-4-amd64 &lt;span class="c"&gt;#1 SMP Debian 3.16.7-ckt9-3~deb8u1 (2015-04-24) x86_64 GNU/Linux&lt;/span&gt;
% /usr/sbin/slapd -V
@&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="c"&gt;#) $OpenLDAP: slapd  (Apr 12 2015 14:28:03) $&lt;/span&gt;
        root@chimera:/tmp/buildd/openldap-2.4.40+dfsg/debian/build/servers/slapd
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;p&gt;Debianなので &lt;code&gt;apt-get&lt;/code&gt; するがよろし。
管理者パスワードを聞かれるので設定する。
&lt;code&gt;ldap-utils&lt;/code&gt; はクライアントプログラムだけど、LDAPサーバにアクセスすることは多々あるため一緒に導入しておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install slapd ldap-utils
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで設定ファイルのひな形が &lt;code&gt;/etc/ldap&lt;/code&gt; の下にできる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/ldap
% ls
ldap.conf  sasl2/  schema/  slapd.d/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以前の &lt;code&gt;slapd&lt;/code&gt; であれば &lt;code&gt;slapd.conf&lt;/code&gt; というファイルを編集して設定していたらしいが、今のバージョンは設定もデータベース上に作成されるとのこと。
これにより、設定を変更しても &lt;code&gt;slapd&lt;/code&gt; を再起動させる必要がなくなるとかいう噂。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ldap.conf&lt;/code&gt; はクライアント（ &lt;code&gt;ldap-utils&lt;/code&gt; ）の設定なので、先にいじっておく。
この記事ではベースDNが &lt;code&gt;dc=hoge,dc=com&lt;/code&gt; として作成したものとして説明する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo vi ldap.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
BASE    dc=hoge,dc=com    ← ★追加する
URI     ldap://localhost  ← ★追加する
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そしてdebianらしく &lt;code&gt;dpkg-reconfigure&lt;/code&gt; で初期設定をしよう。
インストール時の設定とぶつかることがあるので、データを全消去した状態から設定をスタートする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo /etc/init.d/slapd stop
% sudo rm -rf /var/lib/ldap
% sudo dpkg-reconfigure slapd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;設定は以下のような感じだ。&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;OpenLDAPサーバの設定を省略しますか？&lt;/dt&gt;
&lt;dd&gt;いいえ&lt;/dd&gt;
&lt;dt&gt;DNSドメイン名:&lt;/dt&gt;
&lt;dd&gt;自分の使っているドメイン名。これを元にしてベースDNが作成されるとのことだ。
デフォルトはマシンのドメインを元に設定されているので、普通は変更する必要はない。&lt;/dd&gt;
&lt;dt&gt;組織名&lt;/dt&gt;
&lt;dd&gt;ベースDNの属性 &lt;code&gt;o&lt;/code&gt; に入る組織名。&lt;/dd&gt;
&lt;dt&gt;管理者のパスワード&lt;/dt&gt;
&lt;dd&gt;LDAP管理者のパスワード。インストール時にも聞かれたと思うけど、再設定をしているのでもう1回入力しないとダメ。&lt;/dd&gt;
&lt;dt&gt;利用するデータベースバックエンド&lt;/dt&gt;
&lt;dd&gt;好きなやつでいいけど、とりあえず &lt;code&gt;MDB&lt;/code&gt; で。&lt;/dd&gt;
&lt;dt&gt;slapdをパージしたときにデータベースを削除しますか？&lt;/dt&gt;
&lt;dd&gt;はい（slapdを消したらデータベースも不要だよね・・・）&lt;/dd&gt;
&lt;dt&gt;古いデータベースを移動しますか？&lt;/dt&gt;
&lt;dd&gt;新しくインストールしたのであれば「いいえ」でOK。
古いマシンを再設定しているのであれば「はい」にしてバックアップをとるべし。&lt;/dd&gt;
&lt;dt&gt;LDAPv2プロトコルを許可しますか？&lt;/dt&gt;
&lt;dd&gt;イマドキなら「いいえ」にしたいのだが、古いシステムが生きててLDAPv2が必要なら「はい」にする。&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;とりあえず設定を見てみる。
設定は &lt;code&gt;cn=config&lt;/code&gt; に格納されている。
&lt;code&gt;-Y EXTERNAL&lt;/code&gt; と &lt;code&gt;-H ldapi:///&lt;/code&gt; を指定することでシステムの認証を使ってアクセスできる。
エラーなくずらずらっと表示されればOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo ldapsearch -Y EXTERNAL -H ldapi:/// -LLL -b &lt;span class="nv"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;config &lt;span class="p"&gt;|&lt;/span&gt; less
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;初期設定&lt;/h2&gt;
&lt;p&gt;設定には &lt;code&gt;ldapvi&lt;/code&gt; を使うことにするので、まずはこれをインストール。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install ldapvi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インストール時にベースDNとかを入力したので、データベースは作成されている。
自分の場合は古いマシンから移行する目的でLDAPサーバを構築しているので、ルートDNを変更する。
なぜインストール時に指定できないのか謎だ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo ldapvi -Y EXTERNAL -h ldapi:/// -b &lt;span class="s1"&gt;&amp;#39;olcDatabase={1}mdb,cn=config&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
olcRootDN: cn=xxxxx,dc=hoge,dc=com
...
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% ldapvi -D &lt;span class="s2"&gt;&amp;quot;cn=xxxxx,dc=hoge,dc=com&amp;quot;&lt;/span&gt; -b &lt;span class="s2"&gt;&amp;quot;dc=hoge,dc=com&amp;quot;&lt;/span&gt;
★パスワード入力を求められたらパスワードを入力する
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1 cn=xxxxx,dc=hoge,dc=com ← ★ここを修正
...
cn: xxxxx ← ★ここも変更
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;olcDatabase={1}mdb,cn=config&lt;/code&gt; の部分はインストールの最後で実行した確認コマンドの結果から探し出せば分かる。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;設定&lt;/h2&gt;
&lt;p&gt;ここまで来ればインストール時に設定したパスワードを使ってデータベースを参照できるはず。
パスワードなしで見える範囲も確認する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% ldapsearch -x -LLL -D &lt;span class="s2"&gt;&amp;quot;cn=xxxxx,dc=hoge,dc=com&amp;quot;&lt;/span&gt; -W -b &lt;span class="s2"&gt;&amp;quot;dc=hoge,dc=com&amp;quot;&lt;/span&gt;
Enter LDAP Password:  ← ★ここでインストール時に設定したパスワードを入力
dn: &lt;span class="nv"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hoge,dc&lt;span class="o"&gt;=&lt;/span&gt;com
objectClass: top
objectClass: dcObject
objectClass: organization
o: yyyyyy
dc: hoge

dn: &lt;span class="nv"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xxxxx,dc&lt;span class="o"&gt;=&lt;/span&gt;hoge,dc&lt;span class="o"&gt;=&lt;/span&gt;com
objectClass: simpleSecurityObject
objectClass: organizationalRole
description: LDAP administrator
userPassword:: zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
cn: xxxxx

% ldapsearch -x -LLL -b &lt;span class="s2"&gt;&amp;quot;dc=hoge,dc=com&amp;quot;&lt;/span&gt;  ★パスワードなしでアクセスしてみる
dn: &lt;span class="nv"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hoge,dc&lt;span class="o"&gt;=&lt;/span&gt;com
objectClass: top
objectClass: dcObject
objectClass: organization
o: yyyyyy
dc: hoge

dn: &lt;span class="nv"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xxxxx,dc&lt;span class="o"&gt;=&lt;/span&gt;hoge,dc&lt;span class="o"&gt;=&lt;/span&gt;com
objectClass: simpleSecurityObject
objectClass: organizationalRole
description: LDAP administrator
cn: xxxxx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不要なものは &lt;code&gt;ldapvi&lt;/code&gt; で消せばいい。
自分の場合は &lt;code&gt;dn: cn=xxxxx,dc=hoge,dc=com&lt;/code&gt; は不要なので消してしまった。
configの方に設定してあればアクセスできるので十分だ。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="schema"&gt;
&lt;h2&gt;schemaの追加&lt;/h2&gt;
&lt;p&gt;旧マシンの &lt;code&gt;/etc/ldap/schema&lt;/code&gt; に対象のschemaファイルが存在する。
使っているschemaを新マシンに持ってくる。
自分の場合は &lt;code&gt;samba.schema&lt;/code&gt; のschemaを使っていたので、これを &lt;code&gt;/etc/ldap/schema&lt;/code&gt; に持ってきた。&lt;/p&gt;
&lt;p&gt;必要となるschemaファイルを記載したconfigファイルを作成し、 &lt;code&gt;slaptest&lt;/code&gt; コマンドを使ってldifに変換する。
configには依存関係にある全てのschemaを記載する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo vi /etc/ldap/schema/samba.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;include /etc/ldap/schema/core.schema
include /etc/ldap/schema/cosine.schema
include /etc/ldap/schema/nis.schema
include /etc/ldap/schema/inetorgperson.schema
include /etc/ldap/schema/samba.schema
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo mkdir /tmp/ldap
% sudo slaptest -f /etc/ldap/schema/samba.conf -F /tmp/ldap
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;/tmp/ldap/cn=config/cn=schema/cn={4}samba.ldif&lt;/code&gt; というファイルができる。
このままでは登録されないそうなので、これを編集して手動で登録する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo cp /tmp/ldap/cn&lt;span class="o"&gt;=&lt;/span&gt;config/cn&lt;span class="o"&gt;=&lt;/span&gt;schema/cn&lt;span class="o"&gt;={&lt;/span&gt;4&lt;span class="o"&gt;}&lt;/span&gt;samba.ldif /etc/ldap/schema/samba.ldif
% sudo rm -rf /tmp/ldap
% sudo vi /etc/ldap/schema/samba.ldif
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# AUTO-GENERATED FILE - DO NOT EDIT!! Use ldapmodify.  ★最初の2行は不要なので消してしまう
# CRC32 xxxxxxxx
dn: cn=samba,cn=schema,cn=config ← ★dnは変更する
objectClass: olcSchemaConfig
cn: samba                        ← ★cnも変更する
...
structuralObjectClass: olcSchemaConfig     ← ★これ以降の行は削除する
entryUUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
creatorsName: cn=config
createTimestamp: YYYYmmddHHMMSSZ
entryCSN: YYYYmmddHHMMSS.uuuuuuZ#000000#000#000000
modifiersName: cn=config
modifyTimestamp: YYYYmmddHHMMSSZ
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ldapadd&lt;/code&gt; で登録する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/samba.ldif
SASL/EXTERNAL authentication started
SASL username: &lt;span class="nv"&gt;gidNumber&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0+uidNumber&lt;span class="o"&gt;=&lt;/span&gt;0,cn&lt;span class="o"&gt;=&lt;/span&gt;peercred,cn&lt;span class="o"&gt;=&lt;/span&gt;external,cn&lt;span class="o"&gt;=&lt;/span&gt;auth
SASL SSF: 0
adding new entry &lt;span class="s2"&gt;&amp;quot;cn=samba,cn=schema,cn=config&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;きちんと登録されているかを確認してみよう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo ldapsearch -Y EXTERNAL -H ldapi:/// -LLL -b &lt;span class="s2"&gt;&amp;quot;cn=schema,cn=config&amp;quot;&lt;/span&gt; dn
SASL/EXTERNAL authentication started
SASL username: &lt;span class="nv"&gt;gidNumber&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0+uidNumber&lt;span class="o"&gt;=&lt;/span&gt;0,cn&lt;span class="o"&gt;=&lt;/span&gt;peercred,cn&lt;span class="o"&gt;=&lt;/span&gt;external,cn&lt;span class="o"&gt;=&lt;/span&gt;auth
SASL SSF: 0
dn: &lt;span class="nv"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;schema,cn&lt;span class="o"&gt;=&lt;/span&gt;config

dn: &lt;span class="nv"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;0&lt;span class="o"&gt;}&lt;/span&gt;core,cn&lt;span class="o"&gt;=&lt;/span&gt;schema,cn&lt;span class="o"&gt;=&lt;/span&gt;config

dn: &lt;span class="nv"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;1&lt;span class="o"&gt;}&lt;/span&gt;cosine,cn&lt;span class="o"&gt;=&lt;/span&gt;schema,cn&lt;span class="o"&gt;=&lt;/span&gt;config

dn: &lt;span class="nv"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;2&lt;span class="o"&gt;}&lt;/span&gt;nis,cn&lt;span class="o"&gt;=&lt;/span&gt;schema,cn&lt;span class="o"&gt;=&lt;/span&gt;config

dn: &lt;span class="nv"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;3&lt;span class="o"&gt;}&lt;/span&gt;inetorgperson,cn&lt;span class="o"&gt;=&lt;/span&gt;schema,cn&lt;span class="o"&gt;=&lt;/span&gt;config

dn: &lt;span class="nv"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;4&lt;span class="o"&gt;}&lt;/span&gt;samba,cn&lt;span class="o"&gt;=&lt;/span&gt;schema,cn&lt;span class="o"&gt;=&lt;/span&gt;config
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでschemaが登録された。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;アクセス権の設定&lt;/h2&gt;
&lt;p&gt;schemaを追加したところで、アクセス権を適切に設定する。
旧マシンで &lt;code&gt;/etc/ldap/slapd.conf&lt;/code&gt; に書かれていた以下のような文を参考にして設定していく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
access to dn.base=&amp;quot;&amp;quot;
     by * read
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用するデータベースのアクセス権（ &lt;code&gt;olcAccess&lt;/code&gt; ）を変更する。
旧マシンの &lt;code&gt;/etc/ldap/slapd.conf&lt;/code&gt; に書かれている &lt;code&gt;access&lt;/code&gt; 文の &lt;code&gt;to&lt;/code&gt; 以降を番号を付けながら順番に書いていけばいい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo ldapvi -Y EXTERNAL -h ldapi:/// -b &lt;span class="s1"&gt;&amp;#39;olcDatabase={1}mdb,cn=config&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
olcAccess: {0}to attrs=hoge,fuga by self write by * auth
olcAccess: {1}to dn.base=&amp;quot;&amp;quot; by * read
olcAccess: {2}to * by * read
...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;データの移行&lt;/h2&gt;
&lt;p&gt;ここまでできればデータの移行は簡単だ。
旧マシンにおいて &lt;code&gt;slapcat&lt;/code&gt; でデータをldifに吐き出し、これを追加すればいい。&lt;/p&gt;
&lt;p&gt;まずは旧マシンでldifを吐き出す。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo slapcat -l dat.ldif
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;slapcat&lt;/code&gt; が見つからない場合は &lt;code&gt;/usr/sbin/&lt;/code&gt; などにあると思われるのでフルパス指定すればいい。&lt;/p&gt;
&lt;p&gt;次に &lt;code&gt;dat.ldif&lt;/code&gt; を &lt;code&gt;scp&lt;/code&gt; などで新マシンに持ってきて、以下のような感じで追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo slapadd -l dat.ldif
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;確認&lt;/h2&gt;
&lt;p&gt;最後に、きちんとデータを参照できるかを確認して完了だ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% ldapsearch -h &amp;lt;新マシン&amp;gt; -x -b &lt;span class="s2"&gt;&amp;quot;dc=hoge,dc=com&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -l
% ldapsearch -h &amp;lt;新マシン&amp;gt; -x -W -D &lt;span class="s2"&gt;&amp;quot;cn=xxxxx,dc=hoge,dc=com&amp;quot;&lt;/span&gt; -b &lt;span class="s2"&gt;&amp;quot;dc=hoge,dc=com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;クライアント側の設定例（2015/06/06 10:30追記）&lt;/h2&gt;
&lt;p&gt;クライアント側の設定をしてみる。
とりあえず、LDAPサーバ自体のログインもLDAPにしてしまおう。&lt;/p&gt;
&lt;p&gt;Ubuntuでは &lt;code&gt;ldap-auth-client&lt;/code&gt; なるパッケージがあるそうなのだが、Debianには存在しない。
残念。&lt;/p&gt;
&lt;p&gt;というわけで、手動で各種設定を行う。
まずは必要なパッケージ類の導入。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install libpam-ldap libnss-ldap nscd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;libnss-ldap&lt;/code&gt; の設定は以下の通り。&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;LDAPサーバのURI&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;ldap://127.0.0.1/&lt;/code&gt;
もちろん、新マシンのIPアドレスを入力してもOK。
FQDNは解決が必要になるから使わない方が無難だ。&lt;/dd&gt;
&lt;dt&gt;検索ベースの識別名&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;dc=hoge,dc=com&lt;/code&gt;
要するにBase DNのこと。&lt;/dd&gt;
&lt;dt&gt;利用するLDAPバージョン&lt;/dt&gt;
&lt;dd&gt;3&lt;/dd&gt;
&lt;dt&gt;LDAPデータベースはログインを必要とするか？&lt;/dt&gt;
&lt;dd&gt;いいえ&lt;/dd&gt;
&lt;dt&gt;rootへの特別なLDAP権限？&lt;/dt&gt;
&lt;dd&gt;いいえ&lt;/dd&gt;
&lt;dt&gt;オーナのみ設定ファイルの読み書きができるようにする？&lt;/dt&gt;
&lt;dd&gt;はい&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;つづいて &lt;code&gt;libpam-ldap&lt;/code&gt; の設定。&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;LDAPサーバのURI&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;ldap://127.0.0.1/&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;検索ベースの識別名&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;dc=hoge,dc=com&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;利用するLDAPバージョン&lt;/dt&gt;
&lt;dd&gt;3&lt;/dd&gt;
&lt;dt&gt;LDAP管理アカウントがローカルのrootのように振る舞うことを許すか？&lt;/dt&gt;
&lt;dd&gt;普通は「はい」でいいけど、注意書きにあるように &lt;code&gt;/etc&lt;/code&gt; とかを外に出しているなら「いいえ」にすべき。&lt;/dd&gt;
&lt;dt&gt;LDAPデータベースはログインが必要？&lt;/dt&gt;
&lt;dd&gt;いいえ&lt;/dd&gt;
&lt;dt&gt;パスワードに使うローカル暗号化アルゴリズム&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;crypt&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;有効化するPAMプロファイル&lt;/dt&gt;
&lt;dd&gt;お好きにどうぞ。&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;MacがあったりするとmDNS（Multicast DNS）で &lt;code&gt;.local&lt;/code&gt; が付いた名前を解決したくなるので、 &lt;code&gt;libnss-mdns&lt;/code&gt; を導入して名前解決できるようにしておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install libnss-mdns
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に、自動で管理されないという &lt;code&gt;/etc/nsswitch.conf&lt;/code&gt; を編集する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo vi /etc/nsswitch.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
passwd:         files ldap
group:          files ldap
shadow:         files ldap
...
hosts:          files mdns4_minimal [NOTFOUND=return] dns mdns4 ldap
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;_minimal&lt;/code&gt; を付けると、ホスト名の最後に &lt;code&gt;.local&lt;/code&gt; が付いていないかアドレスがmDNSの範囲を超えている場合に名前解決をしなくなる。
なので、上記のように見つからなかった場合を規程しておくことでDNSを見つつローカルネットワークのホストも名前解決できる。
らしい。&lt;/p&gt;
&lt;p&gt;ここまでできたら、別コンソールや &lt;code&gt;su -&lt;/code&gt; などによりLDAPに存在するユーザでログインしてみる。
入れない場合はとりあえず &lt;code&gt;/var/log/auth.log&lt;/code&gt; などを参照しながら修正すべし。&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Sat, 06 Jun 2015 10:30:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-06-05:blog/debian-ldap.html</guid><category>linux</category><category>ldap</category></item><item><title>Debian jessieでGitLabをRedmineと共存させる</title><link>http://pman0214.github.io/blog/debian-gitlab.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;debian jessie 8.0&lt;ul&gt;
&lt;li&gt;debianマシンはすでに用意してあるものとする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gitlab 7.11&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;p&gt;GitLabのインストールは &lt;a class="reference external" href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/install/installation.md"&gt;公式の手順&lt;/a&gt; に従えばいい。
ただし、Redmineと衝突してしまうので、nginxの設定によりサブドメインでGitLabを動かすこととする。&lt;/p&gt;
&lt;p&gt;以下の手順では公式に書かれているパッケージを導入しているので、すでに入っていてインストールが不要なものも多数あるかもしれない。&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;準備&lt;/h3&gt;
&lt;p&gt;まずは必要ツールをインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install build-essential zlib1g-dev libyaml-dev libssl-dev &lt;span class="se"&gt;\&lt;/span&gt;
libgdbm-dev libreadline-dev libncurses5-dev libffi-dev curl openssh-server &lt;span class="se"&gt;\&lt;/span&gt;
redis-server checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev &lt;span class="se"&gt;\&lt;/span&gt;
libicu-dev logrotate python-docutils pkg-config cmake nodejs git-core ruby
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kerberosを使う場合にはこれもいるらしい。自分は不要なので無視した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install libkrb5-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gitlabユーザを設定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo adduser --disabled-login --gecos &lt;span class="s1"&gt;&amp;#39;GitLab&amp;#39;&lt;/span&gt; git
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="postgresql"&gt;
&lt;h3&gt;PostgreSQLの設定&lt;/h3&gt;
&lt;p&gt;ユーザとDBの作成。
&lt;code&gt;password&lt;/code&gt; の部分は変更すること。
記号を含むとうまく動かない場合があるので、記号を含まないパスワードの方がいいかもしれない。
セキュリティ的にはアレだが。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install postgresql postgresql-client libpq-dev
% sudo -u postgres psql
postgres# CREATE ROLE gitlab WITH CREATEDB LOGIN ENCRYPTED PASSWORD &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt; NOINHERIT VALID UNTIL &lt;span class="s1"&gt;&amp;#39;infinity&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
postgres# CREATE DATABASE gitlabhq_production OWNER gitlab&lt;span class="p"&gt;;&lt;/span&gt;
postgres# &lt;span class="se"&gt;\q&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試しにつないでみる。
先ほど設定したパスワードで接続できればOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% psql -h localhost -d gitlabhq_production -U gitlab -W
&lt;span class="nv"&gt;gitlabhq_production&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="se"&gt;\q&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="redis"&gt;
&lt;h3&gt;Redisサーバの導入&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;apt-get&lt;/code&gt; すればよろし。
設定はそのままでOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install redis-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gitをredisグループに追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo vi /etc/group
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
redis:x:113:git   ← ★gitを追加する
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4&gt;2015/06/23追記:&lt;/h4&gt;
&lt;p&gt;このままでは外部から接続できてしまうので、bindの設定を変えておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/redis/
% sudo vi redis.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
bind 127.0.0.1  ← ★コメントアウトされているので、有効化する
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;redis-serverを再起動して完了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo /etc/init.d/redis-server restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gitlab"&gt;
&lt;h3&gt;GitLabの導入&lt;/h3&gt;
&lt;p&gt;まずはソースを落としてくる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /home/git
% sudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-ce.git -b 7-11-stable gitlab
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;設定する。 &lt;code&gt;host&lt;/code&gt; や &lt;code&gt;port&lt;/code&gt; 、 &lt;code&gt;email&lt;/code&gt; 関連を変更するだけでとりあえずはOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /home/git/gitlab
% sudo -u git -H cp config/gitlab.yml.example config/gitlab.yml
% sudo -u git -H vi config/gitlab.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パーミッションをきちんと設定しろとか。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo chown -R git log/
% sudo chown -R git tmp/
% sudo chmod -R u+rwX,go-w log/
% sudo chmod -R u+rwX tmp/
% sudo chmod -R u+rwX tmp/pids/
% sudo chmod -R u+rwX tmp/sockets/
% sudo chmod -R u+rwX public/uploads
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Satelliteとかいうのが必要らしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo -u git -H mkdir /home/git/gitlab-satellites
% sudo chmod &lt;span class="m"&gt;750&lt;/span&gt; /home/git/gitlab-satellites
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;つづいてUnicorn。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo -u git -H cp config/unicorn.rb.example config/unicorn.rb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rack attack。よく分からん。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo -u git -H cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Redisの接続設定。
設定の整合性が取れてないので、設定変更が必要。
port 6379を使うように修正する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo -u git -H cp config/resque.yml.example config/resque.yml
% sudo vi config/resque.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;production&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;redis://localhost:6379  ← ★port 6379を使うように修正する。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gitlabdb"&gt;
&lt;h3&gt;GitLabのDB設定&lt;/h3&gt;
&lt;p&gt;DBを設定する。
production以外はコメントアウトしてしまってOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo -u git cp config/database.yml.postgresql config/database.yml
% sudo -u git -H chmod o-rwx config/database.yml
% sudo vi config/database.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;production&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;username&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;gitlab&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;password&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;★自分で設定したもの&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;host&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;localhost&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Gemを導入してGitLab Shellをインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo -u git -H bundle install --deployment --without development &lt;span class="nb"&gt;test &lt;/span&gt;mysql aws kerberos
% sudo -u git -H bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake gitlab:shell:install&lt;span class="o"&gt;[&lt;/span&gt;v2.6.3&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;REDIS_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;unix:/var/run/redis/redis.sock &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;必要があれば設定を変更する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo vi /home/git/gitlab-shell/config.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いよいよbundle。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo -u git -H bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake gitlab:setup &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後にデフォルトの管理者アカウントが表示されるのでメモしておく。
後で必ず変更すること。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="init"&gt;
&lt;h3&gt;initスクリプトの配置&lt;/h3&gt;
&lt;p&gt;テンプレートをコピーして使えばいいらしい。
特殊な設定にしていない限りはそのままでOK。
&lt;code&gt;update-rc.d&lt;/code&gt; で自動実行登録する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo cp lib/support/init.d/gitlab /etc/init.d/gitlab
% sudo update-rc.d gitlab defaults 21
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;logrotateの設定も提供してくれているらしい。
Redmineとはエラい違いだ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo cp lib/support/logrotate/gitlab /etc/logrotate.d/gitlab
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最終チェック。
そしてコンパイル。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo -u git -H bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake gitlab:env:info &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production

System information
System:         Debian 8.0
Current User:   git
Using RVM:      no
Ruby Version:   2.1.5p273
Gem Version:    2.2.2
Bundler Version:1.10.3
Rake Version:   10.4.2
Sidekiq Version:3.3.0

GitLab information
Version:        7.11.4
Revision:       b725318
Directory:      /home/git/gitlab
DB Adapter:     postgresql
URL:            http://vegeta.f.ait.kyushu-u.ac.jp
HTTP Clone URL: http://vegeta.f.ait.kyushu-u.ac.jp/some-project.git
SSH Clone URL:  git@vegeta.f.ait.kyushu-u.ac.jp:some-project.git
Using LDAP:     no
Using Omniauth: no

GitLab Shell
Version:        2.6.3
Repositories:   /home/git/repositories/
Hooks:          /home/git/gitlab-shell/hooks/
Git:            /usr/bin/git
% sudo -u git -H bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake assets:precompile &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試しに起動してみる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo /etc/init.d/gitlab start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;デフォルトでは &lt;code&gt;127.0.0.1:8080&lt;/code&gt; で起動しているので、サーバ上でブラウザを実行できればアクセスできる。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nginx"&gt;
&lt;h3&gt;Nginxに載せる&lt;/h3&gt;
&lt;p&gt;なにはともあれnginxをインストール。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;nginx用の設定テンプレートも用意してくれている。
素晴らしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo cp lib/support/nginx/gitlab /etc/nginx/sites-available/gitlab
% sudo vi /etc/nginx/sites-available/gitlab
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Redmineと共存させるため、 &lt;code&gt;server_name&lt;/code&gt; は違うものにしておくことが必須。
あとはIPv6でlistenしたくないなら &lt;code&gt;listen [::]:80 default_server&lt;/code&gt; はコメントアウトするか削除してしまう。&lt;/p&gt;
&lt;p&gt;設定を有効化して、テスト。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/nginx/sites-enabled/
% sudo ln -s ../sites-available/gitlab ./
% sudo nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf &lt;span class="nb"&gt;test &lt;/span&gt;is successful
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OKならnginxを再起動する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo /etc/init.d/nginx restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ブラウザからアクセスすれば見えるはず。&lt;/p&gt;
&lt;p&gt;見えないときは、どこまで接続できているかによって見るログが変わってくる。
nginxのリバースプロキシでgitlabに接続できないときは、unicorn関連の設定かnginxの設定、gitlabのエラーが見えたときは、gitlabのログを参照してデバッグすると良い。&lt;/p&gt;
&lt;div class="section" id="id6"&gt;
&lt;h4&gt;2015/06/23追記:&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gitlab-shell"&gt;
&lt;h3&gt;GitLab-Shellの設定変更&lt;/h3&gt;
&lt;p&gt;sshでpushしたときには &lt;code&gt;GitLab-Shell&lt;/code&gt; というのが呼ばれるのだが、ここもまたRedis関連の設定の整合性が取れてないので、設定変更が必要。
&lt;code&gt;localhost:6379&lt;/code&gt; を使うように修正する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /home/git/gitlab-shell
% sudo -u git vi config.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;redis&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;...&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;host&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;localhost  ← ★追加する&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;6379       ← ★追加する&lt;/span&gt;
  &lt;span class="c1"&gt;# socket: /var/run/redis/redis.sock  ← ★コメントアウトする&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Fri, 05 Jun 2015 18:00:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-06-05:blog/debian-gitlab.html</guid><category>debian</category><category>gitlab</category><category>redmine</category></item><item><title>カテゴリを整理しました</title><link>http://pman0214.github.io/blog/category-change.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;p&gt;ごちゃごちゃしてきたのでカテゴリを整理しました。&lt;/p&gt;
&lt;p&gt;ついでに、このブログを生成するのに使っているツールPelicanは日本語のカテゴリをうまく処理してくれないので英語表記に変更しました。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Wed, 03 Jun 2015 19:00:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-06-03:blog/category-change.html</guid><category>info</category><category>category</category></item><item><title>Raspberry Pi用のOpenWrtをビルドする</title><link>http://pman0214.github.io/blog/raspi-openwrt.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;Raspberry Piで動くOpenWrtをDebian 8.0でビルドする手順を概説する。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://openwrt.org/"&gt;OpenWrt&lt;/a&gt; は主にアクセスポイントなどを対象とした組込みLinuxディストリビューション。
FONのAPなどで使われているらしい。
Raspberry PiではRaspbianを動かすのが主流みたいだが、重いしSDの容量も大きくないとダメなのでちょっと使いたいときに不便。
なのでOpenWrtを入れることにした。
パッケージ類を入れまくらない限り、OpenWrtなら100Mもあれば動作させることが可能。
あんまり小さい容量のSDカードは入手できない時代なので、自分は2GBのSDカードに書き込んだ。&lt;/p&gt;
&lt;p&gt;別にビルドしなくてもバイナリは公開されているのだが、自分の欲しいパッケージを組み込んだり、設定をした状態のバイナリが欲しい場合はビルドが必須になるのでメモ。
ImageBuilderを使えば上記のことは可能なような気もするが、まぁ気にしないことにする。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;前提&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Debian機はすでに用意してあるものとする。
本記事執筆時点では8.0（jessie）が最新の安定版リリース。&lt;/li&gt;
&lt;li&gt;ディスクの空き容量は少なくとも50GBくらい用意しておいた方が良い。
カーネルをビルドすると意外と食う。
ビルド完了時点でソースディレクトリは33GBを消費していた。
この他にも必要なツール類を導入しないといけないため、ディスク容量は結構必要となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;ツールのインストール&lt;/h3&gt;
&lt;p&gt;まず必要ツールをインストールする。
Debianなので &lt;code&gt;apt-get&lt;/code&gt; すればOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get update
% sudo apt-get install git-core build-essential libssl-dev &lt;span class="se"&gt;\&lt;/span&gt;
libncurses5-dev unzip subversion gawk python gettext pkg-config &lt;span class="se"&gt;\&lt;/span&gt;
zip openjdk-7-jdk openjdk-7-jre libxml-parser-perl mercurial &lt;span class="se"&gt;\&lt;/span&gt;
zlib1g-dev sdcc bzr
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;OpenWrtのビルド&lt;/h3&gt;
&lt;p&gt;何はともあれソースを取得する。
今回はこの記事執筆時点での最新版を入れることにする。
意外と時間がかかるので注意。
自分が取得したのは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% git clone git://git.openwrt.org/openwrt.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安定版リリースを使いたい場合には &lt;a class="reference external" href="http://wiki.openwrt.org/doc/howto/buildroot.exigence#downloading_sources"&gt;OpenWrtのドキュメント&lt;/a&gt; を参照のこと。&lt;/p&gt;
&lt;p&gt;パッケージ類のソースはfeedで管理されているので、これを使って最新のソースを取得してくる。
&lt;code&gt;feeds.conf&lt;/code&gt; を編集すればfeedを追加できる。
&lt;code&gt;feeds.conf&lt;/code&gt; は最初は存在しないので、 &lt;code&gt;feeds.conf.default&lt;/code&gt; をコピーして使う。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd &lt;/span&gt;openwrt
% ./scripts/feeds update -a
% ./scripts/feeds install -a
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Raspberry Pi用のconfigを取得する。
この記事執筆時点では14.07のものが最新なので、これを取得して足りない設定は自分で施す。
元から &lt;code&gt;.config&lt;/code&gt; がある場合にも上書きしてしまう。
gitから取ってきているので、復活させたければ &lt;code&gt;git checkout&lt;/code&gt; すればいい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% wget http://downloads.openwrt.org/barrier_breaker/14.07/brcm2708/generic/config.brcm2708_generic
% cp config.brcm2708_generic .config
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;必要となるパッケージのチェック。
足りないパッケージがあったら適宜インストールすること。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% make prereq
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;カーネルコンフィグを変更する。
特に、Raspberry Pi2を使っている場合は &lt;code&gt;Subtarget&lt;/code&gt; を &lt;code&gt;BCM2709&lt;/code&gt; に変更しないと動かない（手元にRaspberry Pi2がないから未検証）。
コンフィグを変更したら保存して終了すること。
自分の好きなように変更して良い。
当然のことだが、パッケージを減らせばビルドが速くなる。
イメージサイズは組み込むパッケージ数に依存するので、ビルドしたから必ず大きくなるとは限らない。
ImageBuilderをビルドしておくと単一のパッケージをビルドしたり組み込むパッケージや設定を変更してイメージを作成したりできるので便利。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% make menuconfig
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはmakeするだけなのだが、configファイルを配置したイメージをビルドしたい場合には &lt;code&gt;package/base-files/files/&lt;/code&gt; に配置しておく。
個人的には、設定ファイルを配置したイメージはImageBuilderをビルドしてから作る方が良いように思う。&lt;/p&gt;
&lt;p&gt;makeする。
CPU数が分かっている場合は &lt;code&gt;-j&lt;/code&gt; オプションで指定するとmakeが速くなるかも。
エラーが出た場合は &lt;code&gt;make -j1 V=s&lt;/code&gt; とするとエラーを見ることができる。
もちろん最初から指定しておいてもOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% make -j5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;初めてmakeするときは色々なソースコードを取得してくるのでとてつもなく時間がかかる。
ネットワーク（特に相手側）の速度に依存するため、マシンが速くても速くはならない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make -j5&lt;/code&gt; などとしているとビルドに失敗するときがある。
&lt;code&gt;make -j1 V=s&lt;/code&gt; で試せばエラーが分かる、と表示されるので実行してみると今度はエラーが起きなくなる。
謎だ。&lt;/p&gt;
&lt;p&gt;ソースコードの取得に失敗してエラー終了した場合には、時間を空けてトライするとmakeに成功するかも。
時間を空けてトライしてもダメなら当該パッケージを除外するのが楽な解決方法だ。
自分の場合は依存関係が間違っている場合も何度かあった。
その場合は当該パッケージのMakefileを修正してしまった。
ビルドするパッケージによって他にもツールが必要となる場合があるので、エラーメッセージをよく見て足りないものを導入しながらmakeしていく。&lt;/p&gt;
&lt;p&gt;この記事を書いている時点では、新しいリリースに向けてパッケージ類も変更中なのかたくさんのエラーに遭遇した。
というわけで、現時点ではややハードルが高いかもしれない。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Wed, 03 Jun 2015 10:30:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-06-03:blog/raspi-openwrt.html</guid><category>linux</category><category>raspberry pi</category></item><item><title>EFIなマシンにソフトRAID1でDebianをインストール</title><link>http://pman0214.github.io/blog/debian-efi-raid.html</link><description>&lt;!-- -*- coding: utf-8; -*- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;(U)EFIなマシンがよく分かっていない。
が、時代の流れ的に(U)EFIなマシンにLinuxをインストールする必要が出てきた。
この記事では、よく分かっていない(U)EFIなマシンにソフトRAIDを組みながらインストールするという無謀なことをやる。
最近のソフトRAIDはRAID0,1くらいなら十分に実用になると聞いたので、ハードウェアのRAIDコントローラは導入せずにソフトウェアでRAID1を組むことにした。&lt;/p&gt;
&lt;p&gt;ちなみに、この記事はインストール完了後から書いているので、この通りにやって動くかどうかは分からん。
トラブル発生時に自分で何とかできそうな人だけにオススメする。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;ディスクの準備&lt;/h2&gt;
&lt;p&gt;当然ながら同じ容量（同じ型番が良いらしい。理由は知らん）のディスクを2台用意しないことには始まらない。&lt;/p&gt;
&lt;p&gt;今回は以下のように4台のディスクを用意した。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;500GB x 2台: システムのメインとして使用する&lt;/li&gt;
&lt;li&gt;3TB x 2台: ユーザデータ格納用として使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;p&gt;全ディスクをマシンに刺して、ディスクのパーティション設定時以外は普通にインストールすればいい。
各ディスクは同じパーティション構成にしておく。
自分の場合はこんな感じにした。&lt;/p&gt;
&lt;table border="1" class="pure-table docutils"&gt;
&lt;colgroup&gt;
&lt;col width="14%" /&gt;
&lt;col width="21%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="24%" /&gt;
&lt;col width="16%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;ディスク&lt;/th&gt;
&lt;th class="head"&gt;パーティション&lt;/th&gt;
&lt;th class="head"&gt;サイズ&lt;/th&gt;
&lt;th class="head"&gt;マウントポイント&lt;/th&gt;
&lt;th class="head"&gt;タイプ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;500GB (1)&lt;/td&gt;
&lt;td&gt;/dev/sda1&lt;/td&gt;
&lt;td&gt;100M&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;EFI system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;/dev/sda2&lt;/td&gt;
&lt;td&gt;200M&lt;/td&gt;
&lt;td&gt;/boot&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;/dev/sda5&lt;/td&gt;
&lt;td&gt;メモリと同じだけ&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;swap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;/dev/sda6&lt;/td&gt;
&lt;td&gt;残り全部&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;500GB (2)&lt;/td&gt;
&lt;td&gt;/dev/sdb1&lt;/td&gt;
&lt;td&gt;100M&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;EFI system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;/dev/sdb2&lt;/td&gt;
&lt;td&gt;200M&lt;/td&gt;
&lt;td&gt;/boot2&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;/dev/sdb5&lt;/td&gt;
&lt;td&gt;メモリと同じだけ&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;swap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;/dev/sdb6&lt;/td&gt;
&lt;td&gt;残り全部&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3TB (1)&lt;/td&gt;
&lt;td&gt;/dev/sdc1&lt;/td&gt;
&lt;td&gt;全部&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3TB (2)&lt;/td&gt;
&lt;td&gt;/dev/sdd1&lt;/td&gt;
&lt;td&gt;全部&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;パーティション設定画面にRAIDを設定する部分があるので、ここでRAIDを設定する。
EFIをRAIDに設定することはできないし、 &lt;code&gt;/boot&lt;/code&gt; に関しては &lt;code&gt;grub-install&lt;/code&gt; のときに悲惨な目に遭うとのことなので、自分で冗長化しておくことにした。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/dev/sda6&lt;/code&gt; と &lt;code&gt;/dev/sdb6&lt;/code&gt; で &lt;code&gt;/dev/md0&lt;/code&gt; を、&lt;code&gt;/dev/sdc1&lt;/code&gt; と &lt;code&gt;/dev/sdd1&lt;/code&gt; で &lt;code&gt;/dev/md1&lt;/code&gt; をRAID1として設定する。&lt;/p&gt;
&lt;p&gt;スワップに関しては、別々のディスクにパーティションを設けていればRAID0とほぼ同じ効果を出すことができるのでRAIDの設定をしなくて良い。&lt;/p&gt;
&lt;p&gt;あとは &lt;code&gt;/dev/md0&lt;/code&gt; を &lt;code&gt;/&lt;/code&gt; に、 &lt;code&gt;/dev/md1&lt;/code&gt; を &lt;code&gt;/home&lt;/code&gt; などにマウントしてインストールを続行すればOK。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;スワップを平等に使う&lt;/h2&gt;
&lt;p&gt;デフォルトの設定ではスワップが平等に使われないかもしれない。
スワップの状態は &lt;code&gt;/proc/swaps&lt;/code&gt; で確認できる。
以下のように優先度（ &lt;code&gt;Priority&lt;/code&gt; ）が同じであれば平等に使われることとなる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% cat /proc/swaps
Filename                                Type            Size    Used    Priority
/dev/sdb5                               partition       &lt;span class="m"&gt;15624188&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;       1
/dev/sda5                               partition       &lt;span class="m"&gt;15624188&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;       1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もしPriorityが異なる場合には、 &lt;code&gt;/etc/fstab&lt;/code&gt; で &lt;code&gt;pri&lt;/code&gt; オプションを使って優先度を指定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx none           swap      sw,pri=1      0   0
UUID=yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy none           swap      sw,pri=1      0   0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bootefi"&gt;
&lt;h2&gt;/bootとEFIシステムパーティションの冗長化&lt;/h2&gt;
&lt;p&gt;まずは &lt;code&gt;/boot&lt;/code&gt; を冗長化する。
冗長化と言っても、壊れたときにデータを復元できるようにバックアップを取っているだけなので、故障時には復旧作業が必要になる。&lt;/p&gt;
&lt;p&gt;冗長化用のパーティションは &lt;code&gt;/boot2&lt;/code&gt; としてマウントしてあるはずなので、ここに丸ごとコピーすればOK。
ただし、 &lt;code&gt;/boot/efi&lt;/code&gt; は別のパーティションなので除外する。
マウントするためにディレクトリは作成しておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo rsync --exclude &lt;span class="s2"&gt;&amp;quot;efi/&amp;quot;&lt;/span&gt; -avrz -e cp /boot/ /boot2/
% sudo mkdir /boot2/efi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;EFIシステムパーティションに関してはgrubをインストールすることで同じ内容のパーティションを作成できるが、念のためまったく同じ状態にしておく。
後でgrubを使って上書きするので、この作業は必要ないかもしれない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sda1 &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sdb1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このままではUUIDまで同じになってしまうので、UUIDを書き換える。
EFIシステムパーティションはvfatでフォーマットされているのだが、vfatのUUIDを書き換える方法が分からんのでddで無理矢理書き換える。&lt;/p&gt;
&lt;p&gt;バイナリエディタが必要になるのでbviを導入する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install bvi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パーティションの先頭部分を書き出して、UUIDを変更してから書き戻す。
0x43から4 byteがUUID。リトルエンディアン。
他のディスクとUUIDが異なればいいので、普通は1 byte書き換えれば十分。
各パーティションのUUIDは &lt;code&gt;ls -l /dev/disk/by-uuid&lt;/code&gt; で確認できるので、これを見ると参考になるかも。
ただし &lt;code&gt;dd&lt;/code&gt; コマンド使用後は &lt;code&gt;/dev/sda1&lt;/code&gt; と &lt;code&gt;/dev/sdb1&lt;/code&gt; のUUIDが同じものになっていまっているため、この部分だけはうまく表示できない場合がある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sdb1 &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/blk &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
% sudo bvi /tmp/blk
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これをディスクに書き戻す。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/blk &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sdb1 &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;/etc/fstab&lt;/code&gt; も変更しておく。
&lt;code&gt;/dev/sdb1&lt;/code&gt; はマウントされてないと思われるので、 &lt;code&gt;/dev/sda1&lt;/code&gt; の行をコピーしてUUIDとマウント先を書き換えればOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;UUID=xxxx-xxxx  /boot2/efi       vfat    umask=0077      0       1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;UUIDを書き換えたので、念のため再起動しておく。
&lt;code&gt;/etc/fstab&lt;/code&gt; を書き換えたので &lt;code&gt;/boot2/efi&lt;/code&gt; がマウントされるはず。&lt;/p&gt;
&lt;p&gt;あとはrootになって以下のような感じでgrubをインストールすればOK。
&lt;code&gt;efivars&lt;/code&gt; モジュールがロードされていればEFIブートマネージャ（？）にも登録される。
すなわち、BIOSでブート順を指定するところに現れるようになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo grub-install --target&lt;span class="o"&gt;=&lt;/span&gt;x86_64-efi --efi-directory&lt;span class="o"&gt;=&lt;/span&gt;/boot2/efi --bootloader-id&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;debian (sub)&amp;quot;&lt;/span&gt; --recheck
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;EFIブートマネージャへの登録状況は、オプションなしで &lt;code&gt;efibootmgr&lt;/code&gt; を実行すれば確認できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo efibootmgr
BootCurrent: 0000
Timeout: &lt;span class="m"&gt;1&lt;/span&gt; seconds
BootOrder: 0001,0000,0003,0006,000B
Boot0000* debian
Boot0001* debian &lt;span class="o"&gt;(&lt;/span&gt;sub&lt;span class="o"&gt;)&lt;/span&gt;
Boot0003* UEFI: Built-in EFI Shell
Boot0006* CD/DVD Drive
Boot000B* Hard Drive
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;efivars&lt;/code&gt; モジュールがロードされていなければ、以下のようにしてEFIブートマネージャに登録する。
オプション類はmanを参照のこと。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo efibootmgr -c -g -d /dev/sdb -p &lt;span class="m"&gt;1&lt;/span&gt; -L &lt;span class="s2"&gt;&amp;quot;debian (sub)&amp;quot;&lt;/span&gt; -l &lt;span class="s1"&gt;&amp;#39;\EFI\debian\grubx64.efi&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Tue, 02 Jun 2015 11:05:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-06-01:blog/debian-efi-raid.html</guid><category>debian</category><category>linux</category><category>efi</category><category>raid</category></item><item><title>RedmineをGitHubと連携させる</title><link>http://pman0214.github.io/blog/redmine-github.html</link><description>&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://pman0214.github.io/blog/redmine-install.html"&gt;先日インストールしたRedmine&lt;/a&gt;だが、gitレポジトリの登録はできるものの、その機能は十分とは言えない状況だ。&lt;/p&gt;
&lt;p&gt;svnレポジトリの場合はユーザ名・パスワードを使って自動的にcheckoutできるようなのだが、gitレポジトリではそれができないようだ。
具体的には、gitの場合にはシステム上、すなわちサーバ上に存在するレポジトリのみを登録できるようになっている。いまだ開発途上ということだろう。&lt;/p&gt;
&lt;p&gt;このため、GitHubと連携させるためには一手間が必要となる。&lt;/p&gt;
&lt;h2&gt;Redmineへのweb-hookプラグインの導入&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git&lt;/code&gt;が入っていなかったら&lt;code&gt;sudo apt-get install git-core&lt;/code&gt;で導入しておく。&lt;/p&gt;
&lt;p&gt;GitHubからのweb-hookを使うためにはjsonを処理する必要があるため、json用のgemを導入しておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sudo -u redmine&amp;quot;&lt;/span&gt;
% &lt;span class="nb"&gt;cd&lt;/span&gt; /home/redmine/redmine
% sr vi Gemfile.local
gem &lt;span class="s2"&gt;&amp;quot;json&amp;quot;&lt;/span&gt; ← ★追加する
% sr bundle install --without development &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自分の環境では&lt;code&gt;json&lt;/code&gt;が2回以上あると怒られたので、すでにどこかで書いてあったようだ。実害はないのでいいが。&lt;/p&gt;
&lt;p&gt;GitHub hookプラグインを導入する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /home/redmine/redmine/plugins
% sr git clone https://github.com/koppen/redmine_github_hook.git
% &lt;span class="nb"&gt;cd &lt;/span&gt;redmine_github_hook
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle install --without development &lt;span class="nb"&gt;test&lt;/span&gt;
% &lt;span class="nb"&gt;cd&lt;/span&gt; ../..
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle install --without development &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Redmineを再起動する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo /etc/init.d/redmine restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Redmineに管理者アカウントでログインすれば、管理＞プラグインで&lt;code&gt;Redmine Github Hook plugin&lt;/code&gt;が見えるはず。&lt;/p&gt;
&lt;h2&gt;RedmineでのGitHubレポジトリの追加&lt;/h2&gt;
&lt;p&gt;GitHubのレポジトリを直接持ってくることはできないため、サーバ上でcloneしておく必要がある。
ここでは非公開レポジトリを想定してデプロイキーを使ってcloneすることにする。&lt;/p&gt;
&lt;p&gt;まずはssh鍵を作成。nginx+unicornでredmineを起動しているので、redmineを実行しているユーザは&lt;code&gt;redmine&lt;/code&gt;である。
このユーザ用のssh鍵を作成し、デプロイキーとして登録する。
ssh鍵の作成ではパスフレーズを設定してはいけない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /home/redmine
% &lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sudo -u redmine&amp;quot;&lt;/span&gt;
% sr mkdir .ssh
% sr chmod &lt;span class="m"&gt;700&lt;/span&gt; .ssh
% sr ssh-keygen -t ecdsa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;できあがった公開鍵&lt;code&gt;/home/redmine/.ssh/id_ecdsa.pub&lt;/code&gt;をGitHubの当該レポジトリにデプロイキーとして登録する。&lt;/p&gt;
&lt;p&gt;レポジトリ用のディレクトリを作成してcloneしておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sr mkdir repos
% &lt;span class="nb"&gt;cd &lt;/span&gt;repos
% sr git clone --bare git@github.com/xxxxxx/hoge.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Redmineにcloneしたレポジトリを追加する。
パスは&lt;code&gt;/home/redmine/repos/hoge.git&lt;/code&gt;とすれば良い。
この時点でレポジトリが表示できるはず。&lt;/p&gt;
&lt;p&gt;あとはGitHubにweb-hookを登録すればOK。ここから未テスト。
URLは&lt;code&gt;http(s)://debianサーバ/github_hook?project_id=[プロジェクトの識別子]&lt;/code&gt;とする。
当然ながらdebianサーバは外部からアクセスできるように設定しておく。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Thu, 21 May 2015 12:18:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-05-21:blog/redmine-github.html</guid><category>redmine</category><category>github</category></item><item><title>Debian jessieにRedmineをインストールする</title><link>http://pman0214.github.io/blog/redmine-install.html</link><description>&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;debian jessie 8.0&lt;ul&gt;
&lt;li&gt;debianマシンはすでに用意してあるものとする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;redmine 2.6.5&lt;/li&gt;
&lt;li&gt;backlogs 1.0.6&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;h3&gt;redmine本体&lt;/h3&gt;
&lt;p&gt;必要なツール類をインストールする。MySQLを使うことが多いのだが、個人的な好みによりPostgreSQLを使用することにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install postgresql ruby ruby-dev ruby-pg libpq-dev &lt;span class="se"&gt;\&lt;/span&gt;
  make build-essential gcc &lt;span class="se"&gt;\&lt;/span&gt;
  imagemagick libmagickwand-dev git-core subversion
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PostgreSQLに接続してユーザやDBの作成を行う。&lt;code&gt;password&lt;/code&gt;の部分はもちろん変更すべし。パスワードに記号が入っているとredmineで接続できない場合があるので、英数に限定する方がいいかも。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo -u postgres psql
postgres# CREATE ROLE redmine LOGIN ENCRYPTED PASSWORD &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt; NOINHERIT VALID UNTIL &lt;span class="s1"&gt;&amp;#39;infinity&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
postgres# CREATE DATABASE redmine WITH &lt;span class="nv"&gt;ENCODING&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UTF8&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;OWNER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;redmine&lt;span class="p"&gt;;&lt;/span&gt;
postgres# &lt;span class="se"&gt;\q&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Linuxにユーザ&lt;code&gt;redmine&lt;/code&gt;を追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo adduser --disabled-login --gecos &lt;span class="s1"&gt;&amp;#39;Redmine&amp;#39;&lt;/span&gt; redmine
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;パスワードを設定しておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo passwd redmine
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sudoグループにユーザ&lt;code&gt;redmine&lt;/code&gt;を加えておく。Debianでは&lt;code&gt;visudo&lt;/code&gt;でユーザを追加せず、このグループにユーザを追加するだけでsudoできるように設定されている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo vi /etc/group
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;...
sudo:x:27:redmine ← ★redmineを追加する
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://www.redmine.org/"&gt;Redmineの公式web&lt;/a&gt;からソースをゲットする。Backlogsは2.2.4と2.3.2に対応と書かれているが、今回は執筆時点での最新版2.6.5にBacklogsを導入するという暴挙に出る。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo -u redmine&lt;/code&gt;を多用するのでaliasしておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sudo -u redmine&amp;#39;&lt;/span&gt;
% &lt;span class="nb"&gt;cd&lt;/span&gt; /home/redmine
% sr wget http://www.redmine.org/releases/redmine-2.6.5.tar.gz
% sr tar zxvf redmine-2.6.5.tar.gz
% sr ln -s redmine-2.6.5 redmine
% &lt;span class="nb"&gt;cd &lt;/span&gt;redmine
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;database.ymlのテンプレートをコピーし、設定を施す。&lt;/p&gt;
&lt;p&gt;MySQLの設定をコメントアウトしてPostgreSQLの設定を有効化し、設定を変更する。
testもコメントアウトしてしまってOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sr cp config/database.yml.example config/database.yml
% sr vi config/database.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;production&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;adapter&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postgresql&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;database&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;redmine&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;host&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;localhost&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;username&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;redmine ← ★postgresになっているので変更する&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;password&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;← ★パスワードは最初にPostgreSQLに設定したもの。&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;bundlerを導入してbundleする。システムのrubyを使っているのでbundlerはsudoで入れてしまう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo gem install bundler
% sr bundle install --without development &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;つづいてrake。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sr rake generate_secret_token
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production rake db:migrate
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production rake redmine:load_default_data
Select Language: ja ← ★日本語を指定
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;試しにサーバを動かしてみる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sr ruby script/rails server webrick -e production
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この状態で&lt;code&gt;http://debianサーバ:3000/&lt;/code&gt;に接続して、redmineが見られればOK。
Ctrl-Cでサーバを停止できる。&lt;/p&gt;
&lt;h3&gt;ログ消去&lt;/h3&gt;
&lt;p&gt;ログが永遠に作成されたら嫌なので、logrotateを使って自動的に消去する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo vi /etc/logrotate.d/redmine
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;/home/redmine/redmine/log/*.log {
    rotate 3
    size 1M
    compress
    missingok
    notifempty
    copytruncate
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;テストしてみる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo logrotate -dv /etc/logrotate.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;nginx + unicornにする&lt;/h2&gt;
&lt;p&gt;WEBrickを使うのはアレなのでnginxに乗っける。&lt;/p&gt;
&lt;p&gt;まずはunicornをbundleする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sr vi Gemfile.local
gem &lt;span class="s2"&gt;&amp;quot;unicorn&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;unicornの設定ファイルを作成する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sr vi config/unicorn.rb
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;worker_processes&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;working_directory&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/redmine/redmine&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tmp/unicorn.sock&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RAILS_ROOT&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1:8079&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:tcp_nopush&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tmp/unicorn.pid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RAILS_ROOT&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;

&lt;span class="n"&gt;preload_app&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

&lt;span class="n"&gt;stdout_path&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;log/unicorn.stdout.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RAILS_ROOT&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stderr_path&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;log/unicorn.stderr.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RAILS_ROOT&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="no"&gt;GC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:copy_on_write_friendly&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="no"&gt;GC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy_on_write_friendly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

&lt;span class="n"&gt;before_fork&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disconnect!&lt;/span&gt;

  &lt;span class="n"&gt;old_pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pid&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.oldbin&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;old_pid&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;
      &lt;span class="k"&gt;begin&lt;/span&gt;
        &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;worker_processes&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="ss"&gt;:QUIT&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:TTOU&lt;/span&gt;
        &lt;span class="no"&gt;Process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Errno&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ENOENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Errno&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ESRCH&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;after_fork&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;establish_connection&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;initスクリプトを作成する。上の方の設定は自信無い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo vi /etc/init.d/redmine
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c"&gt;### BEGIN INIT INFO&lt;/span&gt;
&lt;span class="c"&gt;# Provides:          redmine&lt;/span&gt;
&lt;span class="c"&gt;# Required-Start:    $local_fs $remote_fs $network $syslog&lt;/span&gt;
&lt;span class="c"&gt;# Required-Stop:     $local_fs $remote_fs $network $syslog&lt;/span&gt;
&lt;span class="c"&gt;# Default-Start:     2 3 4 5&lt;/span&gt;
&lt;span class="c"&gt;# Default-Stop:      0 1 6&lt;/span&gt;
&lt;span class="c"&gt;# Short-Description: redmine unicorn&lt;/span&gt;
&lt;span class="c"&gt;# Description:       redmine unicorn&lt;/span&gt;
&lt;span class="c"&gt;# chkconfig: - 75 25&lt;/span&gt;
&lt;span class="c"&gt;### END INIT INFO&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin

&lt;span class="c"&gt;# move to project root directory&lt;/span&gt;
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;redmine
&lt;span class="nv"&gt;ENVIROMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production
&lt;span class="nv"&gt;APP_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redmine&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;ROOT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/redmine/redmine&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;PID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/tmp/unicorn.pid&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;CONF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/config/unicorn.rb&amp;quot;&lt;/span&gt;

start&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -e &lt;span class="nv"&gt;$PID&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt; already started&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;start &lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$ROOT_DIR&lt;/span&gt;
  sudo -u &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;APP_USER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -H bundle &lt;span class="nb"&gt;exec &lt;/span&gt;unicorn_rails -c &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CONF&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -E &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ENVIROMENT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -D
&lt;span class="o"&gt;}&lt;/span&gt;

stop&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -e &lt;span class="nv"&gt;$PID&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt; not started&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stop &lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;kill&lt;/span&gt; -QUIT &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PID&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
  rm -f &lt;span class="nv"&gt;$PID&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

force_stop&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -e &lt;span class="nv"&gt;$PID&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt; not started&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stop &lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;kill&lt;/span&gt; -TERM &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PID&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
  rm -f &lt;span class="nv"&gt;$PID&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

reload&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -e &lt;span class="nv"&gt;$PID&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt; not started&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    start
    &lt;span class="nb"&gt;exit &lt;/span&gt;0&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;reload &lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;kill&lt;/span&gt; -HUP &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PID&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

restart&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    stop
    start
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; in
  start&lt;span class="o"&gt;)&lt;/span&gt;
    start
    &lt;span class="p"&gt;;;&lt;/span&gt;
  stop&lt;span class="o"&gt;)&lt;/span&gt;
    stop
    &lt;span class="p"&gt;;;&lt;/span&gt;
  force-stop&lt;span class="o"&gt;)&lt;/span&gt;
    force_stop
    &lt;span class="p"&gt;;;&lt;/span&gt;
  reload&lt;span class="o"&gt;)&lt;/span&gt;
    reload
    &lt;span class="p"&gt;;;&lt;/span&gt;
  restart&lt;span class="o"&gt;)&lt;/span&gt;
    restart
    &lt;span class="p"&gt;;;&lt;/span&gt;
  *&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Syntax Error: release [start|stop|force-stop|reload|restart]&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;permissionを設定し、スタートしておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo chmod &lt;span class="m"&gt;755&lt;/span&gt; /etc/init.d/redmine
% sudo /etc/init.d/redmine start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自動起動設定もしておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo update-rc.d redmine defaults
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;nginxをインストールし、redmineサイト用の設定ファイルを追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo apt-get install nginx
% sudo vi /etc/nginx/sites-available/redmine
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;upstream redmine {
  server 127.0.0.1:8079;
}

server {
  listen 80;
  server_name redmine.hogehoge.com; ← ★ここは自分のものにあわせて変更する
  server_tokens off;
  root /home/redmine/redmine;

  client_max_body_size 20m;

  # individual nginx logs for this gitlab vhost
  access_log  /var/log/nginx/redmine_access.log;
  error_log   /var/log/nginx/redmine_error.log;

  location / {
    try_files $uri $uri/index.html $uri.html @redmine;
  }

  location @redmine {
    proxy_redirect     off;
    proxy_set_header   X-FORWARDED_PROTO $http_x_forwarded_proto;
    proxy_set_header   Host              $http_host;
    proxy_set_header   X-Real-IP         $http_x_forwarded_for;
    proxy_set_header   X-Forwarded-For   $http_x_forwarded_for;
    proxy_pass http://redmine;
    proxy_intercept_errors on;
    error_page 404 /404.html;
    error_page 422 /422.html;
    error_page 500 502 503 504 /500.html;
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;サイトを有効化してnginxを起動する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/nginx/sites-enabled
% sudo ln -s ../sites-available/redmine
% sudo /etc/init.d/nginx restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この状態で&lt;code&gt;http://debianサーバ/&lt;/code&gt;でredmineにアクセスできるはず。&lt;/p&gt;
&lt;h2&gt;Backlogsプラグイン&lt;/h2&gt;
&lt;h3&gt;Redmineの設定&lt;/h3&gt;
&lt;p&gt;Backlogsの導入時にはBacklogs用のトラッカーを設定する必要があるので、Redmineの設定をしておく。&lt;/p&gt;
&lt;p&gt;まずはRedmineにログインする。管理者の初期設定は、ユーザ・パスワードともに&lt;code&gt;admin&lt;/code&gt;となっている。
&lt;strong&gt;「管理＞ユーザー」からユーザ&lt;code&gt;admin&lt;/code&gt;のパスワードを必ず変更する。&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;ロールと権限&lt;/h4&gt;
&lt;p&gt;必要なものを登録しておく。&lt;/p&gt;
&lt;p&gt;複雑にすると使いにくくなるので、個人的には以下の設定で十分だと思う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理者 → 「メンバー」に名前変更&lt;/li&gt;
&lt;li&gt;開発者 → 削除&lt;/li&gt;
&lt;li&gt;報告書 → 削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;トラッカー&lt;/h4&gt;
&lt;p&gt;「管理＞トラッカー」から以下のトラッカーを追加する。最初からあるものは消してしまっても構わない。バグは最初からあるものを使って構わない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;タスク&lt;/li&gt;
&lt;li&gt;ストーリー&lt;/li&gt;
&lt;li&gt;バグ&lt;/li&gt;
&lt;li&gt;課題&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;チケットのステータス&lt;/h4&gt;
&lt;p&gt;「管理＞チケットのステータス」から以下のステータスを作成する。最初からあるものは消す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Todo（デフォルト値）&lt;/li&gt;
&lt;li&gt;Doing&lt;/li&gt;
&lt;li&gt;Done（終了したチケット）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ワークフロー&lt;/h4&gt;
&lt;p&gt;全部のトラッカーに関してステータスを相互に変更できるように設定する。使い方にもよるが、基本的には非メンバや匿名ユーザは変更できないようにしてしまって問題ない。&lt;/p&gt;
&lt;h3&gt;Backlogsの組込み&lt;/h3&gt;
&lt;p&gt;最新版を取得してくる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sudo -u redmine&amp;quot;&lt;/span&gt;
% &lt;span class="nb"&gt;cd&lt;/span&gt; /home/redmine/redmine/plugins
% sr git clone git://github.com/backlogs/redmine_backlogs.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;redmineに導入する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd &lt;/span&gt;redmine_backlogs
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle install --without development &lt;span class="nb"&gt;test&lt;/span&gt;
% &lt;span class="nb"&gt;cd&lt;/span&gt; ../..
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle install --without development &lt;span class="nb"&gt;test&lt;/span&gt;
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake db:migrate
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake tmp:cache:clear
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake tmp:sessions:clear
% sr &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake redmine:backlogs:install
Which trackers &lt;span class="k"&gt;do&lt;/span&gt; you want to use &lt;span class="k"&gt;for&lt;/span&gt; your stories?
  1. タスク
  2. ストーリー
  3. バグ
  4. 課題
Separate values with a space &lt;span class="o"&gt;(&lt;/span&gt;e.g. &lt;span class="m"&gt;1&lt;/span&gt; 3&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;2&lt;/span&gt; ← ★先ほど作った「ストーリー」を選択
Which tracker &lt;span class="k"&gt;do&lt;/span&gt; you want to use &lt;span class="k"&gt;for&lt;/span&gt; your tasks?
  1. タスク
  2. バグ
  3. 課題
Choose one from above &lt;span class="o"&gt;(&lt;/span&gt;or choose none to create a new tracker&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt; ← ★先ほど作った「タスク」を選択
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでBacklogsが使えるようになっているはず。&lt;/p&gt;
&lt;p&gt;最終的に「管理＞情報」では以下のように表示された。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;Environment&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Redmine version                2.6.5.stable&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Ruby version                   2.1.5-p273 (2014-11-13) [x86_64-linux-gnu]&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Rails version                  3.2.21&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Environment                    production&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Database adapter               PostgreSQL&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;SCM&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Subversion                     1.8.10&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Git                            2.1.4&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;Filesystem&lt;/span&gt;                     
&lt;span class="l-Scalar-Plain"&gt;Redmine plugins&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;redmine_backlogs               v1.0.6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Sat, 16 May 2015 15:00:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-05-16:blog/redmine-install.html</guid><category>redmine</category><category>debian</category><category>backlogs</category></item><item><title>virtualenv環境のpythonをcronで呼ぶ</title><link>http://pman0214.github.io/blog/cron-python-virtualenv.html</link><description>&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;virtualenv環境で開発したPythonスクリプトをcronで呼び出したいとき、ライブラリとかをどうやって指定するのか分からなかったので考えてみた。&lt;/p&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;以下のようなスクリプトを作っておき、これを呼び出せばOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;PROG_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/hoge
&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;$PROG_DIR&lt;/span&gt;/bin/activate

python &lt;span class="nv"&gt;$PROG_DIR&lt;/span&gt;/hoge.pyc
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;解説というほどでもないけど&lt;/h2&gt;
&lt;p&gt;要するに、普段やっている&lt;code&gt;source bin/activate&lt;/code&gt;を呼んでおけばいいという話。&lt;/p&gt;
&lt;p&gt;なので上記のようなスクリプトを書いておけば対応できる。
引数がある場合にはスクリプトに引数を付ければOK。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;crontab -e&lt;/code&gt;で上記スクリプトの呼び出しを追加すれば試合終了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# m h dom mon dow       command
10 4 * * *              /usr/local/bin/hoge
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Wed, 06 May 2015 18:58:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-05-06:blog/cron-python-virtualenv.html</guid><category>python</category><category>cron</category><category>virtualenv</category></item><item><title>EFIブートするUSBメモリでdebianをインストール</title><link>http://pman0214.github.io/blog/debian-install-efi.html</link><description>&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;EFIブートするUSBメモリを作成し、これを使ってdebianをインストールする。&lt;/li&gt;
&lt;li&gt;古いXserveをdebian化しようとした中での例。&lt;ul&gt;
&lt;li&gt;インストールできたものの、うまく起動しない状態で終わってます。多分ドライバ周り・・・。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;grubを導入したUSBメモリを用意してしまえば、カーネルや初期RAMディスク、ISOイメージを書き換えるだけでよくなる。この作業はUSBメモリのファイルを書き換えるだけなので、debian機は不要。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;必要なもの&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2GBくらいのUSBメモリ&lt;ul&gt;
&lt;li&gt;中身は完全に消える。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;母艦となるdebian機&lt;ul&gt;
&lt;li&gt;VMでも構わないが、USBメモリをmountできないとダメ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;h3&gt;grubの準備&lt;/h3&gt;
&lt;p&gt;まずは母艦となるdebianでEFI対応のgrubを用意する。インストールしたいアーキテクチャに合わせたものを用意する。今回はx86の64bit版で。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install grub-efi-x86_64-bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;USBメモリにパーティションを作る。&lt;code&gt;/dev/sdb&lt;/code&gt;の部分はUSBメモリのデバイス名を指定する。分からん場合は&lt;code&gt;sudo dmesg&lt;/code&gt;とかで調べるべし。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo fdisk /dev/sdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;あとはよしなに。FAT32にするのが良い。どんなマシンでもFAT32なら読めるみたいなので（確証なし）。partition IDをbにするとWin95 FAT32になる。&lt;/p&gt;
&lt;p&gt;FAT32でフォーマット。&lt;code&gt;-v&lt;/code&gt;は詳細表示、&lt;code&gt;-c&lt;/code&gt;は不良ブロック精査、&lt;code&gt;-F&lt;/code&gt;は形式。16にすればFAT16になる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mkfs.vfat -v -c -F &lt;span class="m"&gt;32&lt;/span&gt; /dev/sdb1
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Q. mkfs.vfatなんてないんだけど。&lt;/li&gt;
&lt;li&gt;A. dosfstoolsを入れるべし。&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install dosfstools
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;USBメモリをマウントし、EFIのディレクトリを指定してgrubをUSBメモリに書き込む。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mount /dev/sdb1 /mnt
sudo grub-install —target&lt;span class="o"&gt;=&lt;/span&gt;x86_64-efi —efi-directory&lt;span class="o"&gt;=&lt;/span&gt;/mnt —boot-directory&lt;span class="o"&gt;=&lt;/span&gt;/mnt/boot —no-floppy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみに、Macで起動するためにはEFIの下を&lt;code&gt;boot/bootx64.efi&lt;/code&gt;にしないとダメらしい。本当かしらん。まぁ、変更しておくということで。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mv /mnt/efi/boot/grubx64.efi /mnt/efi/boot/bootx64.efi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;grub.cfgを&lt;code&gt;boot/grub&lt;/code&gt;に作成する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mkdir -p /mnt/boot/grub
sudo vi /mnt/boot/grub/grub.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;grub.cfg&lt;/code&gt;はこんな感じ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Load Graphical modules
insmod efi_gop
insmod efi_uga

# Load Font module
insmod font


# Setup GFXTERM along with loading unifont.pf2 font file

if loadfont ${prefix}/fonts/unifont.pf2
then
   insmod gfxterm
   set gfxmode=&amp;quot;auto&amp;quot;
   set gfxpayload=keep
   terminal_output gfxterm

   set color_normal=light-blue/black
   set color_highlight=light-cyan/blue
fi

insmod part_gpt
insmod part_msdos
insmod fat
insmod ext2

# Timeout for menu
set timeout=5

# Set default boot entry as Entry 0
set default=0

menuentry &amp;quot;Debian Install (expert mode)&amp;quot; {
  set root=(hd0,msdos1)
  linux /boot/vmlinuz root=/dev/sda1 ro video=efifb agp=off priority=low ipv6.disable=1
  initrd /boot/initrd.gz
}
menuentry &amp;quot;Debian Install&amp;quot; {
  set root=(hd0,msdos1)
  linux /boot/vmlinuz root=/dev/sda1 ro video=efifb agp=off ipv6.disable=1
  initrd /boot/initrd.gz
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでgrubの準備は完了。&lt;/p&gt;
&lt;h3&gt;debianインストーラの導入&lt;/h3&gt;
&lt;p&gt;自分はいつも&lt;a href="https://www.debian.org/devel/debian-installer/"&gt;debian開発者ページ（？）&lt;/a&gt;からインストーラを取得している。
ここで手に入るのはtesting版。だと思う。日次スナップショットはうまく起動しない場合もあるので注意。&lt;/p&gt;
&lt;p&gt;「その他のイメージ＞インストール先アーキテクチャ＞hd-media」とたどる。&lt;/p&gt;
&lt;p&gt;ここから&lt;code&gt;vmlinuz&lt;/code&gt;（カーネル）と&lt;code&gt;initrd.gz&lt;/code&gt;（初期RAMディスク）を取得する。
また、元のページから「netinst CDイメージ」も取得しておく。&lt;/p&gt;
&lt;p&gt;あとはこれを配置するだけ。USBメモリをmountし、以下のように配置する。FAT32でフォーマットしてあるとMacからでもWinからでも配置できるので便利。MacのEFIで読めるのはFATとHFS+とかだった気がするけど定かではない。FAT32なら大丈夫だった。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;ファイル&lt;/th&gt;
&lt;th align="left"&gt;配置場所&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;netinst CDイメージ（.isoファイル）&lt;/td&gt;
&lt;td align="left"&gt;USBメモリのトップ/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;vmlinuz&lt;/td&gt;
&lt;td align="left"&gt;USBメモリのトップ/boot/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;initrd.gz&lt;/td&gt;
&lt;td align="left"&gt;USBメモリのトップ/boot/&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;インストールはどうやるの？&lt;/h2&gt;
&lt;p&gt;普通にUSBメモリからEFIで起動させればOK。&lt;/p&gt;
&lt;p&gt;インストーラでパーティションを切るときに、EFI用のディレクトリを作成しないとダメ。100MBくらいで十分なはずだけど、200MBくらいを確保している。&lt;/p&gt;
&lt;p&gt;Windowsが入っているマシンとかに後からdebianを追加するときは、すでにあるEFIシステムパーティションが利用できる。もちろん、WindowsがEFIブートでインストールされていれば、の話だが。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Thu, 30 Apr 2015 12:55:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-04-30:blog/debian-install-efi.html</guid><category>debian</category><category>efi</category></item><item><title>Pelican+GitHub Pagesでブログ引っ越し</title><link>http://pman0214.github.io/blog/pelican-blog-github.html</link><description>&lt;p&gt;これまで&lt;a href="http://pman0214.blog37.fc2.com/"&gt;FC2ブログ&lt;/a&gt;にお世話になってきたが、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技術系なネタが多いため、ソースコード等が書きやすいとうれしい&lt;/li&gt;
&lt;li&gt;自在なレイアウトができるとうれしい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などの理由からGitHub Pagesを使うことにした。
あんまり書かないかもしれないけど・・・。&lt;/p&gt;
&lt;p&gt;ともあれ、Pelicanを使ってこのブログを構築したので、そのときのメモ。&lt;/p&gt;
&lt;h2&gt;Pelicanを使ったブログ構築作業&lt;/h2&gt;
&lt;h3&gt;概要&lt;/h3&gt;
&lt;p&gt;このブログはPelicanを使って静的ページを構成している。
生成に使用したソースを公開するのは気が引けるので、生成したhtmlファイル群だけを公開することとした。
このためにちょっと特殊な使い方をしている。&lt;/p&gt;
&lt;h3&gt;前提&lt;/h3&gt;
&lt;p&gt;pythonやvirtualenv、makeなどは導入されているものとする。&lt;/p&gt;
&lt;h3&gt;構築&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ローカルマシンにpelican用の環境を構築。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;適当なディレクトリを作成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir ~/blog
&lt;span class="nb"&gt;cd&lt;/span&gt; !&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;virtualenv環境でpelicanを導入。Markdownを使いたいので、Markdownも導入しておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv --system-site-packages ./
&lt;span class="nb"&gt;source &lt;/span&gt;bin/activate
pip install pelican
pip install Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt;ファイルを作成しておく。なお、&lt;code&gt;.DS_Store&lt;/code&gt;などはグローバルに無視する設定をしているので除外してある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.Python
bin/
include/
lib/
man/
local/
output/
pip-selfcheck.json
cache/
*.pyc
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pelican-quickstart&lt;/code&gt;を実行して各種設定を施す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2015/04/27追記:&lt;/strong&gt; 自分の場合は&lt;code&gt;pelicanconf.py&lt;/code&gt;の&lt;code&gt;SITEURL&lt;/code&gt;がうまく設定できていなかった。この設定ができていないとCSSのURLがまずいことになり、うまく動かない場合がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ここでいったんcommitしておくと幸せになれるかも。&lt;/li&gt;
&lt;li&gt;gitレポジトリを作成。&lt;code&gt;git status&lt;/code&gt;して出てきたファイルを追加してcommit。&lt;div class="highlight"&gt;&lt;pre&gt;git init .
git status
git add Makefile .gitignore develop_server.sh ...
git commit -m &lt;span class="s2"&gt;&amp;quot;Initial commit with pelican files.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;htmlファイル群の出力先である&lt;code&gt;output&lt;/code&gt;ディレクトリが消えないようにする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;publishconf.py&lt;/code&gt;を修正&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/publishconf.py b/publishconf.py&lt;/span&gt;
&lt;span class="gh"&gt;index 98162b2..dfb1731 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/publishconf.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/publishconf.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -16,7 +16,7 @@ RELATIVE_URLS = False&lt;/span&gt;
 FEED_ALL_ATOM = &amp;#39;feeds/all.atom.xml&amp;#39;
 CATEGORY_FEED_ATOM = &amp;#39;feeds/%s.atom.xml&amp;#39;

&lt;span class="gd"&gt;-DELETE_OUTPUT_DIRECTORY = True&lt;/span&gt;
&lt;span class="gi"&gt;+DELETE_OUTPUT_DIRECTORY = False&lt;/span&gt;

 # Following items are often useful when publishing
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Makefile&lt;/code&gt;も修正しておく。&lt;code&gt;make clean&lt;/code&gt;すると消えてしまうので。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/Makefile b/Makefile&lt;/span&gt;
&lt;span class="gh"&gt;index dc640c3..35df450 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/Makefile&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/Makefile&lt;/span&gt;
&lt;span class="gu"&gt;@@ -58,7 +58,7 @@ html:&lt;/span&gt;
        $(PELICAN) $(INPUTDIR) -o $(OUTPUTDIR) -s $(CONFFILE) $(PELICANOPTS)

 clean:
&lt;span class="gd"&gt;-   [ ! -d $(OUTPUTDIR) ] || rm -rf $(OUTPUTDIR)&lt;/span&gt;
&lt;span class="gi"&gt;+   [ ! -d $(OUTPUTDIR) ] || echo rm -rf $(OUTPUTDIR)&lt;/span&gt;

 regenerate:
        $(PELICAN) -r $(INPUTDIR) -o $(OUTPUTDIR) -s $(CONFFILE) $(PELICANOPTS)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ここで再びgit add &amp;amp; git commit。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;そのままのMarkdownではGitHubに慣れている人にはツライので、各種のライブラリ（？）を導入。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mdx_linkfyとmdx_del_insを導入。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install mdx_linkify
pip install mdx_del_ins
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;に以下を追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;MD_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;del_ins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;fenced_code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;codehilite(css_class=highlight)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tables&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;試しに記事を書いてみる&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;記事は&lt;code&gt;content&lt;/code&gt;の下に配置する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;管理を単純にするため、投稿日をファイル名とすることにした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;touch content &lt;span class="sb"&gt;`&lt;/span&gt;date +%Y%m%d&lt;span class="sb"&gt;`&lt;/span&gt;.md
open !&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先頭に各種情報を書いておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title: Pelican+GitHub Pagesでブログ引っ越し
Date: 2015-04-26 18:00
Category: カテゴリ
Tags: info, blog, python, pelican, github
Slug: pelican-blog-github  ←permanent link。「この名前+html」ファイルが生成される。
Author: pman0214
Summary: この記事の要約。
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;htmlファイル群を生成して表示してみる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;htmlファイル群を生成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make html
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;localでWebサーバを起動。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;あとはブラウザで&lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;を表示すればOK。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;テーマの変更&lt;/h3&gt;
&lt;p&gt;デフォルトはブログっぽくないので変更する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;テーマを検討する。&lt;a href="http://pelicanthemes.com/"&gt;Pelican Themes&lt;/a&gt;で確認できる。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;テーマ用レポジトリを取得する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;テーマのレポジトリをsubmoduleとして追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git submodule add git@github.com:getpelican/pelican-themes.git themes
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先ほどのテーマのディレクトリがsubmoduleであれば、それを取得する。この記事執筆時点では&lt;a href="https://github.com/jody-frankowski/blue-penguin/"&gt;blue-penguin&lt;/a&gt;を選択した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;themes
git submodule init blue-penguin
git submodule update blue-penguin
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;に以下のように設定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pelican-themes/blue-penguin&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2015/04/27追記:&lt;/strong&gt; 間違ってます。正しくはこうです。&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;themes/blue-penguin&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;公開用レポジトリの設定&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;GitHubに&lt;code&gt;blog&lt;/code&gt;という名前のレポジトリを作成。ここに公開用のhtmlファイル群をpushする。自分は&lt;a href="https://github.com/pman0214/blog"&gt;https://github.com/pman0214/blog&lt;/a&gt;を作成した。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;output&lt;/code&gt;の下をレポジトリにしてしまえばOK。ただし、レポジトリのGitHub Pageを使うため、&lt;code&gt;gh-pages&lt;/code&gt;ブランチにcommit &amp;amp; pushする必要がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;output&lt;/code&gt;ディレクトリをgitレポジトリにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;output
git init ./
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gh-pages&lt;/code&gt;ブランチに切り替え。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git checkout -b gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全ファイルをadd、そしてcommit。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add *
git commit -m &lt;span class="s2"&gt;&amp;quot;Article `date +%Y%m%d`.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHubにpushできるようにする。自分の場合はこんな感じ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git remote add origin git@github.com:pman0214/blog.git
git push origin gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公開されたページを確認する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://account.github.com/repository&lt;/code&gt;でアクセスできるはず。&lt;/li&gt;
&lt;li&gt;このブログは&lt;a href="http://pman0214.github.io/blog"&gt;http://pman0214.github.io/blog&lt;/a&gt;となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参考ページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.sotm.jp/2014/01/04/Pelican-Markdown-GithubPages-install-guide/"&gt;Human as a Serviceな日々 - Pelican + Markdown + GitHub Pagesで管理するブログの作り方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;Amy Hanlon - Migrating to GitHub Pages using Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/5t111111/items/d745af778969bf00f038"&gt;Qiita - PelicanでGitHub Flavored Markdown(GFM)をマジで使いたい！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pman0214</dc:creator><pubDate>Sun, 26 Apr 2015 18:00:00 +0900</pubDate><guid>tag:pman0214.github.io,2015-04-26:blog/pelican-blog-github.html</guid><category>info</category><category>blog</category><category>python</category><category>pelican</category><category>github</category></item></channel></rss>